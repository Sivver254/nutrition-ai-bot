# bot.py ‚Äî Calories AI (webhook, AI vision, weekly plan, recipes)
import os, json, time, datetime, threading, math, re
from uuid import uuid4

import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ====== CONFIG ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

# Premium price/duration (env-override)
STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))  # ‚≠ê
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret123")
EXTERNAL_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")  # nutrition-ai-bot.onrender.com
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# Admins
def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try: ids.add(int(os.getenv("ADMIN_ID")))
        except: pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit(): ids.add(int(x))
    if not ids:
        ids.add(123456789)  # –ø–æ–º–µ–Ω—è–π –ª–∏–±–æ –∑–∞–¥–∞–π ADMIN_ID/ADMIN_IDS
    return ids

ADMIN_IDS = _parse_admins()
def is_admin(uid:int)->bool: return uid in ADMIN_IDS

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"      # –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î
WELCOME_FILE = "welcome.txt"  # —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

# ====== –ë–î ======
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def _save(db):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db, uid:int):
    s = str(uid)
    if s not in db:
        db[s] = {
            "joined": int(time.time()),
            "premium": False,
            "premium_until": 0,
            "trial_started": 0,
            "profile": { "sex": None, "height": None, "weight": None, "goal": None },
            "last_features": {},
        }
    return db[s]

def set_premium(uid:int, days:int):
    db = _load()
    u = get_user(db, uid)
    now = int(time.time())
    base = u["premium_until"] if u["premium_until"] > now else now
    u["premium_until"] = base + days*86400
    u["premium"] = True
    db[str(uid)] = u
    _save(db)

def get_current_price() -> int:
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

def has_premium(uid:int) -> bool:
    # –∞–¥–º–∏–Ω–∞–º ‚Äî –≤—Å–µ–≥–¥–∞ True
    if is_admin(uid): return True
    db = _load(); u = db.get(str(uid))
    if not u: return False
    if u["premium"] and u["premium_until"] > int(time.time()):
        return True
    # –∞–≤—Ç–æ-—Å–±—Ä–æ—Å
    if u["premium"] and u["premium_until"] <= int(time.time()):
        u["premium"] = False
        db[str(uid)] = u; _save(db)
    return False

def start_trial_if_needed(uid:int):
    db = _load(); u = get_user(db, uid)
    if u["trial_started"] == 0:
        u["trial_started"] = int(time.time())
        db[str(uid)] = u; _save(db)

def trial_active(uid:int) -> bool:
    if is_admin(uid): return True
    db = _load(); u = get_user(db, uid)
    ts = u.get("trial_started", 0)
    return ts != 0 and (int(time.time()) - ts) < 24*3600

def log_payment(uid:int, stars:int, payload:str):
    db = _load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

# ====== WELCOME TEXT ======
def get_welcome_text() -> str:
    default = (
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
        "‚Ä¢ ¬´üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
        "‚Ä¢ ¬´üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
        "–¢–∞–∫–∂–µ –ø–æ–¥–±–µ—Ä—É <b>–º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π</b> –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª.\n"
        "¬´üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π."
    )
    if not os.path.exists(WELCOME_FILE):
        with open(WELCOME_FILE, "w", encoding="utf-8") as f: f.write(default)
        return default
    try:
        with open(WELCOME_FILE, "r", encoding="utf-8") as f:
            t = f.read().strip()
            return t or default
    except:
        return default

def set_welcome_text(new_text:str):
    with open(WELCOME_FILE, "w", encoding="utf-8") as f:
        f.write(new_text.strip())

# ====== OpenAI helpers (–º—è–≥–∫–∏–µ –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞) ======
def ai_available() -> bool:
    return bool(OPENAI_API_KEY)

def ai_summarize(prompt:str, system:str="–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.") -> str:
    if not ai_available():
        # –º—è–≥–∫–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return "‚ö†Ô∏è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        chat = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system", "content":system},
                {"role":"user", "content":prompt}
            ],
            temperature=0.4,
            max_tokens=600
        )
        return chat.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ò–ò –æ—à–∏–±–∫–∞: {e}"

def ai_vision_estimate_kbju(image_url:str, hint_text:str="") -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∫—Ç: {"kcal": int, "p":int, "f":int, "c":int, "title": "–ë–ª—é–¥–æ", "items":[...]}
    """
    if not ai_available():
        # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return {"kcal": 520, "p": 32, "f": 18, "c": 50, "title": "–ë–ª—é–¥–æ (–ø—Ä–∏–º–µ—Ä)", "items": ["–ø—Ä–∏–º–µ—Ä –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"]}
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        msg = [
            {"role":"system","content":"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏ –ö–ë–ñ–£."},
            {"role":"user","content":[
                {"type":"input_text","text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ. –î–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –ö–ë–ñ–£." + (f"\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}" if hint_text else "")},
                {"type":"input_image","image_url": image_url}
            ]}
        ]
        out = client.chat.completions.create(model="gpt-4o-mini", messages=msg, temperature=0.2, max_tokens=500)
        text = out.choices[0].message.content
        # –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ä–∞–∑–±–æ—Ä —Ü–∏—Ñ—Ä
        kcal = re.search(r'(\d{2,4})\s*–∫?–∫?–∞–ª', text.lower())
        p = re.search(r'–±.*?(\d{1,3})', text.lower())
        f = re.search(r'–∂.*?(\d{1,3})', text.lower())
        c = re.search(r'—É.*?(\d{1,3})', text.lower())
        title = re.search(r'–Ω–∞–∑–≤–∞–Ω–∏–µ\s*[:\-]\s*(.+)', text.lower())
        return {
            "kcal": int(kcal.group(1)) if kcal else 500,
            "p": int(p.group(1)) if p else 30,
            "f": int(f.group(1)) if f else 20,
            "c": int(c.group(1)) if c else 50,
            "title": (title.group(1).strip().title() if title else "–ë–ª—é–¥–æ"),
            "items": re.findall(r'‚Ä¢\s*(.+)', text)
        }
    except Exception as e:
        return {"kcal": 520, "p": 32, "f": 18, "c": 50, "title":"–ë–ª—é–¥–æ", "items":[f"–û—à–∏–±–∫–∞ –ò–ò: {e}"]}
        # ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu(uid:int=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"), KeyboardButton("üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"))
    kb.row(KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton("üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"))
    kb.row(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
    if uid and is_admin(uid):
        kb.row(KeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def back_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def sex_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def goal_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"), KeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
USER_FLOW = {}  # {uid: {"step": "...", "tmp": {...}}}

def reset_flow(uid:int):
    USER_FLOW.pop(uid, None)

# ====== –°—Ç–∞—Ä—Ç ======
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db = _load(); u = get_user(db, m.from_user.id); _save(db)
    bot.send_message(m.chat.id, get_welcome_text(), reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text=="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def check_premium(m):
    if has_premium(m.from_user.id):
        db = _load(); u = db.get(str(m.from_user.id), {})
        exp = u.get("premium_until", 0)
        exp_str = datetime.datetime.fromtimestamp(exp).strftime("%d.%m.%Y") if exp>0 else "‚àû"
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp_str}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text=="‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def buy_premium(m):
    price = get_current_price()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars"))
    bot.send_message(m.chat.id, f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.\n–¶–µ–Ω–∞: {price} ‚≠ê", reply_markup=kb)

# ====== –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∞ ======
@bot.message_handler(func=lambda m: m.text=="üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
def week_menu_start(m):
    uid = m.from_user.id
    db = _load(); u = get_user(db, uid)
    USER_FLOW[uid] = {"step":"ask_sex", "tmp":{}}
    bot.send_message(m.chat.id, "–ö–æ–º—É —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞–Ω? –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=sex_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="ask_sex")
def week_menu_sex(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        reset_flow(m.from_user.id); bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    if m.text not in ("–ú—É–∂—á–∏–Ω–∞","–ñ–µ–Ω—â–∏–Ω–∞"):
        bot.reply_to(m, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú—É–∂—á–∏–Ω–∞¬ª –∏–ª–∏ ¬´–ñ–µ–Ω—â–∏–Ω–∞¬ª.", reply_markup=sex_kb()); return
    USER_FLOW[m.from_user.id]["tmp"]["sex"] = "male" if m.text=="–ú—É–∂—á–∏–Ω–∞" else "female"
    USER_FLOW[m.from_user.id]["step"] = "ask_height"
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="ask_height")
def week_menu_height(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW[m.from_user.id]["step"]="ask_sex"; bot.send_message(m.chat.id,"–ö–æ–º—É –ø–ª–∞–Ω? –ü–æ–ª:", reply_markup=sex_kb()); return
    try:
        h = int(re.sub(r"[^\d]", "", m.text))
        if h < 100 or h > 240: raise ValueError
        USER_FLOW[m.from_user.id]["tmp"]["height"] = h
        USER_FLOW[m.from_user.id]["step"] = "ask_weight"
        bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):", reply_markup=back_kb())
    except:
        bot.reply_to(m, "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 178.", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="ask_weight")
def week_menu_weight(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW[m.from_user.id]["step"]="ask_height"; bot.send_message(m.chat.id,"–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):", reply_markup=back_kb()); return
    try:
        w = int(re.sub(r"[^\d]", "", m.text))
        if w < 30 or w > 300: raise ValueError
        USER_FLOW[m.from_user.id]["tmp"]["weight"] = w
        USER_FLOW[m.from_user.id]["step"] = "ask_goal"
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=goal_kb())
    except:
        bot.reply_to(m, "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 72.", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="ask_goal")
def week_menu_goal(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW[m.from_user.id]["step"]="ask_weight"; bot.send_message(m.chat.id,"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):", reply_markup=back_kb()); return
    if m.text not in ("–ü–æ—Ö—É–¥–µ–Ω–∏–µ","–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞","–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"):
        bot.reply_to(m, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Ü–µ–ª–∏.", reply_markup=goal_kb()); return
    USER_FLOW[m.from_user.id]["tmp"]["goal"] = m.text
    USER_FLOW[m.from_user.id]["step"] = "build_week_plan"

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—å
    db = _load(); u = get_user(db, m.from_user.id)
    u["profile"].update(USER_FLOW[m.from_user.id]["tmp"])
    db[str(m.from_user.id)] = u; _save(db)

    # –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    bot.send_chat_action(m.chat.id, "typing")
    msg = bot.send_message(m.chat.id, "üß† –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –ø–æ–¥ –≤–∞—Å! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5‚Äì10 —Å–µ–∫—É–Ω–¥‚Ä¶", reply_markup=back_kb())
    plan = build_week_menu_ai(m.from_user.id)
    bot.edit_message_text(plan, m.chat.id, msg.message_id, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

def build_week_menu_ai(uid:int) -> str:
    db = _load(); u = get_user(db, uid)
    sex = "–º—É–∂—á–∏–Ω–∞" if u["profile"].get("sex")=="male" else "–∂–µ–Ω—â–∏–Ω–∞"
    h = u["profile"].get("height") or 170
    w = u["profile"].get("weight") or 70
    goal = u["profile"].get("goal") or "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"

    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π, –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª {sex}, —Ä–æ—Å—Ç {h} —Å–º, –≤–µ—Å {w} –∫–≥, —Ü–µ–ª—å: {goal}.\n"
        f"–ù–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å: –∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–µ—Ä–µ–∫—É—Å—ã, –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –∏ –ö–ë–ñ–£ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞. "
        f"–°—É–º–º–∞—Ä–Ω—É—é —Å—É—Ç–æ—á–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏ —Å—Ç—Ä–æ–∫–æ–π ¬´–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: N –∫–∫–∞–ª¬ª. "
        f"–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ. –ë–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π."
    )
    ans = ai_summarize(prompt, system="–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ –¥–Ω—è–º.")
    return ans
    # ====== –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É ======
@bot.message_handler(func=lambda m: m.text=="üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É")
def kbju_list_start(m):
    uid = m.from_user.id
    start_trial_if_needed(uid)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ\n–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ...¬ª. –ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥",
        reply_markup=back_kb()
    )
    USER_FLOW[uid] = {"step":"kbju_list"}

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="kbju_list")
def kbju_list_calc(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        reset_flow(m.from_user.id); bot.send_message(m.chat.id,"–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    uid = m.from_user.id
    if not (trial_active(uid) or has_premium(uid)):
        price = get_current_price()
        bot.reply_to(m, f"üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å –ø—Ä–µ–º–∏—É–º–æ–º. –ö—É–ø–∏ –ø—Ä–µ–º–∏—É–º –∑–∞ {price} ‚≠ê.", reply_markup=main_menu(uid))
        reset_flow(uid); return

    items = [x.strip() for x in re.split(r"[;,]\s*", m.text) if x.strip()]
    if not items:
        bot.reply_to(m, "–ù–µ –ø–æ–Ω—è–ª —Å–ø–∏—Å–æ–∫ ü§î –ü—Ä–∏—à–ª–∏ —Ç–∞–∫: ¬´–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥¬ª.", reply_markup=back_kb()); return

    # –ò–ò-–ø–æ–¥—Å—á—ë—Ç –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π)
    prompt = (
        "–ü–æ—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π. –í–µ—Ä–Ω–∏ –∏—Ç–æ–≥ –∏ –∫—Ä–∞—Ç–∫—É—é —Ç–∞–±–ª–∏—Ü—É.\n" +
        "\n".join(items)
    )
    ans = ai_summarize(prompt, system="–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∏—â–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ.")
    bot.send_message(m.chat.id, ans, reply_markup=main_menu(uid))
    reset_flow(uid)

# ====== –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ ======
@bot.message_handler(func=lambda m: m.text=="üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ")
def kbju_photo_hint(m):
    uid = m.from_user.id
    start_trial_if_needed(uid)
    USER_FLOW[uid] = {"step":"wait_photo_hint"}
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.", reply_markup=back_kb())

@bot.message_handler(content_types=['photo'])
def kbju_photo_handle(m):
    uid = m.from_user.id
    state = USER_FLOW.get(uid,{}).get("step")
    if state not in ("wait_photo_hint", None):  # —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ
        return
    if not (trial_active(uid) or has_premium(uid)):
        price = get_current_price()
        bot.reply_to(m, f"üîí –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º. –ö—É–ø–∏ –∑–∞ {price} ‚≠ê.", reply_markup=main_menu(uid))
        reset_flow(uid); return

    # URL —Ñ–æ—Ç–æ
    file_id = m.photo[-1].file_id
    info = bot.get_file(file_id)
    img_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{info.file_path}"

    tmp_msg = bot.send_message(m.chat.id, "üß† –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ö–ë–ñ–£‚Ä¶")
    result = ai_vision_estimate_kbju(img_url, hint_text=m.caption or "")
    title = result.get("title","–ë–ª—é–¥–æ")
    items = result.get("items", [])
    ans = (
        f"<b>{title}</b>\n"
        + (("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: " + ", ".join(items) + "\n") if items else "")
        + f"–ü—Ä–∏–º–µ—Ä–Ω–æ: ~{result['kcal']} –∫–∫–∞–ª, –ë/–ñ/–£ {result['p']}/{result['f']}/{result['c']}"
    )
    bot.edit_message_text(ans, m.chat.id, tmp_msg.message_id, reply_markup=main_menu(uid))
    reset_flow(uid)

# ====== –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò ======
@bot.message_handler(func=lambda m: m.text=="üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò")
def recipes_menu(m):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("–†–µ—Ü–µ–ø—Ç –ø–æ –∫–∞–ª–æ—Ä–∏—è–º"), KeyboardButton("–†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb)
    USER_FLOW[m.from_user.id] = {"step":"recipes_menu"}

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipes_menu")
def recipes_choice(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        reset_flow(m.from_user.id); bot.send_message(m.chat.id, "–û–∫–µ–π, –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    if m.text == "–†–µ—Ü–µ–ø—Ç –ø–æ –∫–∞–ª–æ—Ä–∏—è–º":
        USER_FLOW[m.from_user.id] = {"step":"recipe_cal"}
        bot.send_message(m.chat.id, "–°–∫–æ–ª—å–∫–æ –∫–∫–∞–ª –Ω—É–∂–Ω–æ? –ù–∞–ø—Ä–∏–º–µ—Ä: 600", reply_markup=back_kb())
    elif m.text == "–†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É":
        USER_FLOW[m.from_user.id] = {"step":"recipe_free"}
        bot.send_message(m.chat.id, "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∏–Ω—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", reply_markup=back_kb())
    else:
        bot.reply_to(m, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipe_cal")
def recipe_by_cal(m):
    if m.text=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        recipes_menu(m); return
    try:
        cal = int(re.sub(r"[^\d]","", m.text))
        tmp = bot.send_message(m.chat.id, "üë®‚Äçüç≥ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶")
        prompt = (
            f"–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ {cal} –∫–∫–∞–ª. "
            "–î–∞–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π, —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫—É –ö–ë–ñ–£."
        )
        ans = ai_summarize(prompt, system="–¢—ã –∫—É–ª–∏–Ω–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        bot.edit_message_text(ans, m.chat.id, tmp.message_id, reply_markup=main_menu(m.from_user.id))
        reset_flow(m.from_user.id)
    except:
        bot.reply_to(m, "–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 600.", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipe_free")
def recipe_free(m):
    if m.text=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        recipes_menu(m); return
    tmp = bot.send_message(m.chat.id, "üë®‚Äçüç≥ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶")
    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{m.text}¬ª. "
        "–î–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π, —à–∞–≥–∏, –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é."
    )
    ans = ai_summarize(prompt, system="–¢—ã –∫—É–ª–∏–Ω–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    bot.edit_message_text(ans, m.chat.id, tmp.message_id, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)
    # ====== –û–ø–ª–∞—Ç–∞ Stars ======
@bot.callback_query_handler(func=lambda c: c.data=="buy_premium_stars")
def cb_buy_premium_stars(c):
    price_now = get_current_price()
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=price_now)]
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",  # Stars
        currency="XTR",
        prices=prices,
        is_flexible=False
    )
    bot.answer_callback_query(c.id)

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try: bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e: print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp = m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id, total, payload)
            db = _load(); u = db.get(str(m.from_user.id), {})
            exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
            bot.send_message(m.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
        else:
            if total: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ====== –ê–¥–º–∏–Ω–∫–∞ ======
@bot.message_handler(func=lambda m: m.text in ("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu(m.from_user.id)); return
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
        InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums")
    )
    kb.row(
        InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm_broadcast"),
        InlineKeyboardButton("üìù –ò–∑–º. –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="adm_welcome")
    )
    kb.row(InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–≥)", callback_data="adm_income"))
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    if not is_admin(c.from_user.id):
        bot.answer_callback_query(c.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    db = _load()
    if c.data == "adm_users":
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len([k for k in db.keys() if k!='__payments__'])}</b>")
    elif c.data == "adm_premiums":
        now = int(time.time())
        active = 0
        for k,v in db.items():
            if k=="__payments__": continue
            if isinstance(v, dict) and (is_admin(int(k)) or (v.get('premium') and v.get('premium_until',0)>now)):
                active+=1
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif c.data == "adm_income":
        pays = db.get("__payments__", [])
        total = sum(p["stars"] for p in pays)
        cnt = len(pays)
        bot.send_message(c.message.chat.id, f"üí∞ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: <b>{total} ‚≠ê</b> ({cnt} –æ–ø–ª–∞—Ç)")
    elif c.data == "adm_broadcast":
        bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ä–∞–∑–æ—à–ª—é –≤—Å–µ–º).", parse_mode=None)
        bot.register_next_step_handler(c.message, admin_broadcast_step)
    elif c.data == "adm_welcome":
        bot.send_message(c.message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –¢–µ–∫—É—â–∏–π:\n\n" + get_welcome_text(), parse_mode=None)
        bot.register_next_step_handler(c.message, admin_welcome_step)

def admin_broadcast_step(m):
    if not is_admin(m.from_user.id): return
    db = _load()
    text = m.text
    ok, fail = 0, 0
    for k in list(db.keys()):
        if k=="__payments__": continue
        try:
            bot.send_message(int(k), text)
            ok += 1
        except:
            fail += 1
    bot.reply_to(m, f"üì£ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}", reply_markup=main_menu(m.from_user.id))

def admin_welcome_step(m):
    if not is_admin(m.from_user.id): return
    set_welcome_text(m.text)
    bot.reply_to(m, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu(m.from_user.id))
    # ====== Webhook server (Flask) ======
def run_web():
    try:
        from flask import Flask, request, abort
        app = Flask(__name__)

        @app.get("/")
        def index(): return "Bot is running", 200

        @app.post(f"/tg/{WEBHOOK_SECRET}")
        def webhook():
            if request.headers.get('content-type') != 'application/json':
                return abort(403)
            # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ö–µ–¥–µ—Ä–∞:
            # if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET: abort(403)
            update = telebot.types.Update.de_json(request.get_data(as_text=True))
            bot.process_new_updates([update])
            return "ok", 200

        # –°–Ω–∏–º–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ –ø–æ—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
        try:
            bot.remove_webhook()  # –±–µ–∑ drop_pending_updates (–≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞)
        except Exception as e:
            print("remove_webhook warn:", e)

        if not EXTERNAL_HOST:
            print("‚ö†Ô∏è RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            url = f"https://{EXTERNAL_HOST}/tg/{WEBHOOK_SECRET}"
            bot.set_webhook(url=url)  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å secret_token=WEBHOOK_SECRET –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö API

        port = int(os.getenv("PORT", "10000"))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        print("‚ùå Webhook setup failed:", e)

# ====== –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞) ======
def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)

# ====== Run ======
if __name__ == "__main__":
    threading.Thread(target=auto_restart, daemon=True).start()
    print("‚úÖ Bot started (webhook)")
    run_web()
