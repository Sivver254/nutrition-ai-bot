# =======================
# Calories AI ‚Äî webhook version with background tasks
# =======================
import os, json, time, threading, base64, re
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor

import requests
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret123")
EXTERNAL_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME", "")  # –Ω–∞–ø—Ä. nutrition-ai-bot.onrender.com
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x}

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=True)

# ---------- SIMPLE DB (json) ----------
DB_FILE = "db.json"
LOCK = threading.RLock()

def _load():
    if not os.path.exists(DB_FILE):
        return {"users": {}, "welcome": DEFAULT_WELCOME, "broadcast_log": []}
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"users": {}, "welcome": DEFAULT_WELCOME, "broadcast_log": []}

def _save(db):
    with LOCK:
        with open(DB_FILE, "w", encoding="utf-8") as f:
            json.dump(db, f, ensure_ascii=False, indent=2)

def db_get():
    with LOCK:
        return _load()

def db_set_user(uid, data: dict):
    with LOCK:
        db = _load()
        u = db["users"].get(str(uid), {})
        u.update(data)
        db["users"][str(uid)] = u
        _save(db)

def db_get_user(uid):
    with LOCK:
        db = _load()
        return db["users"].get(str(uid), {})

def db_get_welcome():
    with LOCK:
        db = _load()
        return db.get("welcome", DEFAULT_WELCOME)

def db_set_welcome(text):
    with LOCK:
        db = _load()
        db["welcome"] = text
        _save(db)

# ---------- STATES ----------
USER_FLOW = {}  # uid -> {"step": "...", ...}

def set_step(uid, step, **extra):
    USER_FLOW[uid] = {"step": step, **extra}

def get_step(uid):
    return USER_FLOW.get(uid, {}).get("step")

def reset_flow(uid):
    USER_FLOW.pop(uid, None)

def is_admin(uid):
    return uid in ADMIN_IDS

# ---------- KEYBOARDS ----------
def main_menu(uid=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"), KeyboardButton("üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"))
    kb.row(KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton("üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"))
    if uid and is_admin(uid):
        kb.row(KeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
    "‚Ä¢ ¬´üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
    "‚Ä¢ ¬´üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
    "–¢–∞–∫–∂–µ –ø–æ–¥–±–µ—Ä—É <b>–º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π</b> –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª.\n"
    "¬´üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
    "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π."
)

# ---------- BG EXECUTOR ----------
EXEC = ThreadPoolExecutor(max_workers=int(os.getenv("WORKERS", "6")))

def run_bg(target, *args, **kwargs):
    EXEC.submit(_safe_wrap, target, *args, **kwargs)

def _safe_wrap(fn, *args, **kwargs):
    try:
        fn(*args, **kwargs)
    except Exception as e:
        print("BG task error:", e)

def safe_delete(chat_id, message_id):
    try: bot.delete_message(chat_id, message_id)
    except: pass

def safe_edit(chat_id, message_id, text, **kw):
    try:
        bot.edit_message_text(text, chat_id, message_id, **kw)
    except:
        try: bot.send_message(chat_id, text, **kw)
        except: pass

# ---------- OpenAI helpers ----------
def oai_chat(messages, temperature=0.7, max_tokens=800):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI Chat (—Ç–µ–∫—Å—Ç).
    """
    try:
        import openai
        openai.api_key = OPENAI_API_KEY
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print("openai text error:", e)
        return None

def oai_vision(prompt_text, image_bytes, temperature=0.2, max_tokens=700):
    """
    –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É (base64) + —Ç–µ–∫—Å—Ç.
    """
    try:
        import openai, base64
        openai.api_key = OPENAI_API_KEY
        b64 = base64.b64encode(image_bytes).decode("utf-8")
        messages = [
            {"role":"system","content":"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–æ/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ —Ñ–æ—Ç–æ –∏ –æ—Ü–µ–Ω–∏ –ö–ë–ñ–£ (–∫–∫–∞–ª, –ë/–ñ/–£)."},
            {"role":"user","content":[
                {"type":"text","text": prompt_text},
                {"type":"image_url","image_url":{"url": f"data:image/jpeg;base64,{b64}"}}
            ]}
        ]
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print("openai vision error:", e)
        return None

# ---------- Webhook (Flask) ----------
from flask import Flask, request, abort
app = Flask(__name__)

@app.get("/")
def index():
    return "Bot is running", 200

@app.post(f"/tg/{WEBHOOK_SECRET}")
def tg_webhook():
    if request.headers.get("content-type") != "application/json":
        abort(403)
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        abort(403)
    update = telebot.types.Update.de_json(request.get_data(as_text=True))
    bot.process_new_updates([update])
    return "ok", 200

def setup_webhook():
    try:
        bot.remove_webhook()  # –Ω–∞ –≤—Å—è–∫–∏–π
    except Exception as e:
        print("remove_webhook warn:", e)
    url = f"https://{EXTERNAL_HOST}/tg/{WEBHOOK_SECRET}"
    ok = bot.set_webhook(
        url=url,
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
        max_connections=40
    )
    print("‚úÖ Webhook set:", ok)
    # ========== START / BACK ==========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    uid = m.from_user.id
    reset_flow(uid)
    bot.send_message(m.chat.id, db_get_welcome(), reply_markup=main_menu(uid))

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(m):
    uid = m.from_user.id
    reset_flow(uid)
    bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(uid))

# ========== PROFILE (–¥–ª—è –ø–ª–∞–Ω–∞) ==========
def profile_complete(uid):
    u = db_get_user(uid)
    need = all(k in u for k in ("sex","height","weight","goal"))
    return need

def ask_profile(uid, chat_id):
    set_step(uid, "sex")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞"), KeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=kb)

@bot.message_handler(func=lambda m: get_step(m.from_user.id) == "sex")
def prof_sex(m):
    uid = m.from_user.id
    if m.text not in ["üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"]:
        bot.reply_to(m, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=back_menu()); return
    sex = "male" if "–ú—É–∂—á–∏–Ω–∞" in m.text else "female"
    db_set_user(uid, {"sex": sex})
    set_step(uid, "height")
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):", reply_markup=back_menu())
    bot.register_next_step_handler(msg, prof_height)

def prof_height(m):
    uid = m.from_user.id
    try:
        h = int(re.sub(r"\D+","", m.text))
        if not (120 <= h <= 230): raise ValueError
        db_set_user(uid, {"height": h})
        set_step(uid, "weight")
        msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_weight)
    except:
        msg = bot.reply_to(m, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 178", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_height)

def prof_weight(m):
    uid = m.from_user.id
    try:
        w = float(re.sub(r"[^\d\.]+","", m.text))
        if not (35 <= w <= 300): raise ValueError
        db_set_user(uid, {"weight": w})
        set_step(uid, "goal")
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row(KeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"), KeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"))
        kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=kb)
    except:
        msg = bot.reply_to(m, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 74", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_weight)

@bot.message_handler(func=lambda m: get_step(m.from_user.id) == "goal")
def prof_goal(m):
    uid = m.from_user.id
    opts = ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ","–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞","–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"]
    if m.text not in opts:
        bot.reply_to(m, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=back_menu()); return
    goal_map = {"–ü–æ—Ö—É–¥–µ–Ω–∏–µ":"cut","–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞":"maintain","–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":"bulk"}
    db_set_user(uid, {"goal": goal_map[m.text]})
    reset_flow(uid)
    bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ! –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_menu(uid))

# ========== –ö–ë–ñ–£ –ø–æ –°–ü–ò–°–ö–£ ==========
@bot.message_handler(func=lambda m: m.text == "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É")
def kbju_list_start(m):
    uid = m.from_user.id
    set_step(uid, "kbju_list")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ...¬ª.\n–ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥",
        reply_markup=back_menu()
    )

@bot.message_handler(func=lambda m: get_step(m.from_user.id) == "kbju_list")
def kbju_list_calc(m):
    uid = m.from_user.id
    text = (m.text or "").strip()
    if not text or "–ù–∞–∑–∞–¥" in text:
        reset_flow(uid)
        bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu(uid))
        return

    wait = bot.send_message(m.chat.id, "üß† –°—á–∏—Ç–∞—é –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É‚Ä¶", reply_markup=back_menu())
    run_bg(_kbju_by_list_bg, m, wait.message_id)

def _kbju_by_list_bg(m, wait_id):
    chat_id = m.chat.id
    uid = m.from_user.id
    try:
        user = db_get_user(uid)
        prompt = (
            "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ—Å—á–∏—Ç–∞–π —Å—É–º–º–∞—Ä–Ω–æ–µ –ö–ë–ñ–£ (–∫–∫–∞–ª/–±/–∂/—É) –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏.\n"
            "–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ¬´–ª–æ–∂–∫–∞/—â–µ–ø–æ—Ç–∫–∞¬ª ‚Äî –æ—Ü–µ–Ω–∏ —Ä–∞–∑—É–º–Ω–æ.\n"
            "–í–µ—Ä–Ω–∏:\n"
            "1) –ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–∫–∫–∞–ª/–ë/–ñ/–£)\n"
            "2) –ò—Ç–æ–≥–æ (–∫–∫–∞–ª –∏ –ë/–ñ/–£)\n\n"
            f"–°–ø–∏—Å–æ–∫: {m.text}"
        )
        res = oai_chat([{"role":"user","content":prompt}], temperature=0.2, max_tokens=900)
        if not res:
            raise RuntimeError("AI calc failed")
        safe_delete(chat_id, wait_id)
        reset_flow(uid)
        bot.send_message(chat_id, res, reply_markup=main_menu(uid))
    except Exception as e:
        print("kbju_list error:", e)
        safe_edit(chat_id, wait_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(uid))
        reset_flow(uid)
        # ========== –ö–ë–ñ–£ –ø–æ –§–û–¢–û ==========
@bot.message_handler(func=lambda m: m.text == "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ")
def kbju_photo_prompt(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.", reply_markup=back_menu())

@bot.message_handler(content_types=['photo'])
def kbju_photo_received(m):
    wait = bot.send_message(m.chat.id, "üß† –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ö–ë–ñ–£‚Ä¶", reply_markup=back_menu())
    try:
        file_id = m.photo[-1].file_id
    except:
        safe_edit(m.chat.id, wait.message_id, "–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ.", reply_markup=main_menu(m.from_user.id))
        return
    run_bg(_kbju_from_photo_bg, m, wait.message_id, file_id)

def _kbju_from_photo_bg(m, wait_id, file_id):
    chat_id = m.chat.id
    uid = m.from_user.id
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        f = bot.get_file(file_id)
        url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
        img = requests.get(url, timeout=20).content

        caption = m.caption or ""
        prompt = (
            "–û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–æ –∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.\n"
            "–î–∞–π –æ—Ü–µ–Ω–∫—É –ö–ë–ñ–£ –ø–æ—Ä—Ü–∏–∏ (–∫–∫–∞–ª, –ë/–ñ/–£). –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî —É–∫–∞–∂–∏ —ç—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤.\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n–û—Ü–µ–Ω–∫–∞: ~XXX –∫–∫–∞–ª, –ë/–ñ/–£ xx/xx/xx\n–ö—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        )
        res = oai_vision(prompt, img)
        if not res:
            raise RuntimeError("vision failed")
        safe_delete(chat_id, wait_id)
        bot.send_message(chat_id, res, reply_markup=main_menu(uid))
    except Exception as e:
        print("photo kbju error:", e)
        safe_edit(chat_id, wait_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(uid))

# ========== –†–ï–¶–ï–ü–¢–´ ==========
@bot.message_handler(func=lambda m: m.text == "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò")
def recipes_menu(m):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üçΩ –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"), KeyboardButton("üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ N –∫–∫–∞–ª"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üçΩ –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É")
def recipe_freeform(m):
    msg = bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–±–ª–∏–Ω—á–∏–∫–∏ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞¬ª):", reply_markup=back_menu())
    bot.register_next_step_handler(msg, _recipe_freeform_step)

def _recipe_freeform_step(m):
    query = (m.text or "").strip()
    if not query or "–ù–∞–∑–∞–¥" in query:
        bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–∏–ª.", reply_markup=main_menu(m.from_user.id))
        return
    wait = bot.send_message(m.chat.id, "üß† –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶", reply_markup=back_menu())
    run_bg(_make_recipe_bg, m, wait.message_id, {"type":"freeform", "q":query})

@bot.message_handler(func=lambda m: m.text == "üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ N –∫–∫–∞–ª")
def recipe_kcal(m):
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 600):", reply_markup=back_menu())
    bot.register_next_step_handler(msg, _recipe_kcal_step)

def _recipe_kcal_step(m):
    try:
        kcal = int(''.join([c for c in m.text if c.isdigit()]))
        wait = bot.send_message(m.chat.id, "üß† –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶", reply_markup=back_menu())
        run_bg(_make_recipe_bg, m, wait.message_id, {"type":"kcal", "kcal":kcal})
    except:
        bot.reply_to(m, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 600.", reply_markup=back_menu())

def _make_recipe_bg(m, wait_id, params:dict):
    chat_id = m.chat.id
    uid = m.from_user.id
    try:
        if params["type"] == "freeform":
            prompt = (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ —à–µ—Ñ.\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –ø–æ–Ω—è—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—Å –≥—Ä–∞–º–º–∞–º–∏), –ø–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫—É –ö–ë–ñ–£ (–∫–∫–∞–ª, –ë/–ñ/–£).\n"
                f"–ó–∞–ø—Ä–æ—Å: {params['q']}"
            )
        else:
            prompt = (
                "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ —à–µ—Ñ.\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (+/- 5%).\n"
                "–í–µ—Ä–Ω–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–≥/—à—Ç), —à–∞–≥–∏, –æ—Ü–µ–Ω–∫—É –ö–ë–ñ–£ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞–º–µ–Ω–µ/–ø–æ–¥—Å—Ç—Ä–æ–π–∫–µ.\n"
                f"–¶–µ–ª—å: {params['kcal']} –∫–∫–∞–ª."
            )
        res = oai_chat([{"role":"user","content":prompt}], temperature=0.6, max_tokens=1000)
        if not res:
            raise RuntimeError("recipe failed")
        safe_delete(chat_id, wait_id)
        bot.send_message(chat_id, res, reply_markup=main_menu(uid))
    except Exception as e:
        print("recipe error:", e)
        safe_edit(chat_id, wait_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(uid))

# ========== –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ ==========
@bot.message_handler(func=lambda m: m.text == "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
def week_menu(m):
    uid = m.from_user.id
    if not profile_complete(uid):
        ask_profile(uid, m.chat.id)
        return
    wait = bot.send_message(m.chat.id, "üß† –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –ø–æ–¥ –≤–∞—Å! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5‚Äì15 —Å–µ–∫—É–Ω–¥‚Ä¶", reply_markup=back_menu())
    run_bg(_build_week_plan_bg, m, wait.message_id)

def _build_week_plan_bg(m, wait_id):
    chat_id = m.chat.id
    uid = m.from_user.id
    try:
        u = db_get_user(uid)
        sex = "–º—É–∂—á–∏–Ω–∞" if u["sex"]=="male" else "–∂–µ–Ω—â–∏–Ω–∞"
        goal_map = {"cut":"–ø–æ—Ö—É–¥–µ–Ω–∏–µ","maintain":"–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞","bulk":"–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"}
        goal = goal_map[u["goal"]]
        prompt = (
            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.\n"
            "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –≤ –≤–∏–¥–µ:\n"
            "–î–µ–Ω—å X (–ü–Ω/–í—Ç/‚Ä¶):\n- –ó–∞–≤—Ç—Ä–∞–∫: ... (–∫–∫–∞–ª, –ë/–ñ/–£)\n- –ü–µ—Ä–µ–∫—É—Å: ...\n- –û–±–µ–¥: ...\n- –ü–µ—Ä–µ–∫—É—Å: ...\n- –£–∂–∏–Ω: ...\n–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: –∫–∫–∞–ª, –ë/–ñ/–£\n\n"
            "–£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª—å (–¥–µ—Ñ–∏—Ü–∏—Ç/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 3‚Äì5 –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å.\n"
            "–î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–∞–º–µ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–æ–ª ‚Äî {sex}, —Ä–æ—Å—Ç ‚Äî {u['height']} —Å–º, –≤–µ—Å ‚Äî {u['weight']} –∫–≥, —Ü–µ–ª—å ‚Äî {goal}."
        )
        res = oai_chat([{"role":"user","content":prompt}], temperature=0.5, max_tokens=2200)
        if not res:
            raise RuntimeError("week plan failed")
        safe_delete(chat_id, wait_id)
        bot.send_message(chat_id, res, reply_markup=main_menu(uid))
    except Exception as e:
        print("week plan error:", e)
        safe_edit(chat_id, wait_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(uid))
        # ========== –ê–î–ú–ò–ù–ö–ê ==========
@bot.message_handler(func=lambda m: m.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def adm_panel(m):
    uid = m.from_user.id
    if not is_admin(uid):
        bot.reply_to(m, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.", reply_markup=main_menu(uid)); return
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞"))
    kb.row(KeyboardButton("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def adm_users(m):
    if not is_admin(m.from_user.id): return
    db = db_get()
    bot.send_message(m.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(db.get('users',{}))}</b>", reply_markup=back_menu())

@bot.message_handler(func=lambda m: m.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
def adm_broadcast(m):
    if not is_admin(m.from_user.id): return
    set_step(m.from_user.id, "adm_broadcast")
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω).", reply_markup=back_menu())

@bot.message_handler(func=lambda m: get_step(m.from_user.id) == "adm_broadcast")
def adm_broadcast_send(m):
    uid = m.from_user.id
    if "–ù–∞–∑–∞–¥" in (m.text or ""):
        reset_flow(uid); bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(uid)); return
    reset_flow(uid)
    run_bg(_broadcast_bg, m)
    bot.send_message(m.chat.id, "üöÄ –ó–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ.", reply_markup=main_menu(uid))

def _broadcast_bg(m):
    text = m.text
    db = db_get()
    users = list(db.get("users", {}).keys())
    sent = 0
    for suid in users:
        try:
            bot.send_message(int(suid), text, disable_web_page_preview=True)
            sent += 1
            time.sleep(0.03)
        except Exception as e:
            print("broadcast err to", suid, e)
    with LOCK:
        db = _load()
        db["broadcast_log"].append({"at": datetime.utcnow().isoformat(), "sent": sent})
        _save(db)
    try:
        bot.send_message(m.chat.id, f"–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent}</b>")
    except: pass

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
def adm_welcome(m):
    if not is_admin(m.from_user.id): return
    set_step(m.from_user.id, "adm_welcome")
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (HTML –æ–∫).", reply_markup=back_menu())

@bot.message_handler(func=lambda m: get_step(m.from_user.id) == "adm_welcome")
def adm_welcome_set(m):
    uid = m.from_user.id
    if "–ù–∞–∑–∞–¥" in (m.text or ""):
        reset_flow(uid); bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(uid)); return
    db_set_welcome(m.text)
    reset_flow(uid)
    bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ. –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=main_menu(uid))
    # ========== AUTO-REGISTER USER ==========
@bot.message_handler(func=lambda m: True, content_types=['text','photo','document','audio','video','sticker','voice'])
def ensure_user(m):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —é–∑–µ—Ä–∞ –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º (–º—ã —É–∂–µ –≤—Å—ë –æ–ø–∏—Å–∞–ª–∏ –≤—ã—à–µ),
    –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –∏ no-op.
    """
    try:
        u = db_get_user(m.from_user.id)
        if not u:
            db_set_user(m.from_user.id, {
                "first_name": m.from_user.first_name,
                "username": m.from_user.username,
                "created_at": datetime.utcnow().isoformat()
            })
    except Exception as e:
        print("ensure_user err:", e)
    # –ù–ò–ß–ï–ì–û –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º ‚Äî —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º.

# ========== MAIN ==========
if __name__ == "__main__":
    print("Starting (webhook)‚Ä¶")
    setup_webhook()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
