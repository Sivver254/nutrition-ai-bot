# bot.py (—á–∞—Å—Ç—å 1/4) ‚Äî –∫–æ–Ω—Ñ–∏–≥, –±–∞–∑–∞, —Ö–µ–ª–ø–µ—Ä—ã
import os, json, time, math, threading, datetime
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ===== –ö–æ–Ω—Ñ–∏–≥ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –Ω—É–∂–µ–Ω –¥–ª—è –ò–ò –∏ —Ñ–æ—Ç–æ
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))
STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))

ADMIN_IDS = set()
if os.getenv("ADMIN_ID"):
    try: ADMIN_IDS.add(int(os.getenv("ADMIN_ID")))
    except: pass
if os.getenv("ADMIN_IDS"):
    for x in os.getenv("ADMIN_IDS").split(","):
        x=x.strip()
        if x.isdigit(): ADMIN_IDS.add(int(x))
if not ADMIN_IDS:
    ADMIN_IDS.add(123456789)  # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞

def is_admin(uid:int)->bool: return uid in ADMIN_IDS

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ===== "–ë–î" =====
DATA_FILE = "users.json"
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE,"w",encoding="utf-8") as f: f.write("{}")
    try:
        return json.load(open(DATA_FILE,"r",encoding="utf-8"))
    except: return {}
def _save(db):
    json.dump(db, open(DATA_FILE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)

def get_user(db, uid:int):
    s=str(uid)
    if s not in db:
        db[s] = {
            "joined": int(time.time()),
            "premium": False, "premium_until":0,
            "trial_until": 0,                    # –ø—Ä–æ–±–Ω—ã–π 24 —á–∞—Å–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ö–ë–ñ–£
            "profile": {}                        # –∞–Ω–∫–µ—Ç–∞
        }
    return db[s]

def set_premium(uid:int, days:int):
    db=_load(); u=get_user(db, uid)
    now=int(time.time()); base=u["premium_until"] if u["premium_until"]>now else now
    u["premium_until"]=base+days*86400; u["premium"]=True
    db[str(uid)]=u; _save(db)

def has_premium(uid:int)->bool:
    if is_admin(uid): return True
    db=_load(); u=db.get(str(uid))
    if not u: return False
    if u["premium"] and u["premium_until"]>int(time.time()): return True
    if u["premium"] and u["premium_until"]<=int(time.time()):
        u["premium"]=False; db[str(uid)]=u; _save(db)
    return False

def mark_trial(uid:int, hours=24):
    db=_load(); u=get_user(db, uid)
    u["trial_until"]=int(time.time())+hours*3600
    db[str(uid)]=u; _save(db)

def has_trial(uid:int)->bool:
    if is_admin(uid): return True
    db=_load(); u=db.get(str(uid))
    return bool(u and u.get("trial_until",0)>int(time.time()))

def log_payment(uid:int, stars:int, payload:str):
    db=_load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

def get_current_price()->int:
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

# ===== UI =====
MAIN_BTNS = {
    "buy": "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
    "check": "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
    "photo": "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ",
    "list": "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É",
    "menu": "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "recipes": "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò",
    "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    "admin": "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"
}

def main_menu(uid:int=None):
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(MAIN_BTNS["buy"]), KeyboardButton(MAIN_BTNS["check"]))
    kb.row(KeyboardButton(MAIN_BTNS["photo"]), KeyboardButton(MAIN_BTNS["list"]))
    kb.row(KeyboardButton(MAIN_BTNS["menu"]))
    kb.row(KeyboardButton(MAIN_BTNS["recipes"]))
    if uid and is_admin(uid):
        kb.row(KeyboardButton(MAIN_BTNS["admin"]))
    return kb

def back_menu(): 
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(MAIN_BTNS["back"]))
    return kb

def send_typing(chat_id, kind="typing", seconds=2):
    # kind: typing, upload_photo, choose_sticker...
    try:
        for _ in range(seconds):
            bot.send_chat_action(chat_id, kind)
            time.sleep(1)
    except: pass

# –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã ¬´–°–æ–∑–¥–∞—é‚Ä¶¬ª
def temp_message(chat_id, text):
    try: 
        m = bot.send_message(chat_id, text)
        return (m.chat.id, m.message_id)
    except:
        return (None, None)
def delete_temp(msg_tuple):
    cid, mid = msg_tuple
    if cid and mid:
        try: bot.delete_message(cid, mid)
        except: pass
            # bot.py (—á–∞—Å—Ç—å 2/4)

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
    "‚Ä¢ ¬´üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
    "‚Ä¢ ¬´üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º–æ–≤–∫—É\n\n"
    "–¢–∞–∫–∂–µ —Å–¥–µ–ª–∞—é –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª.\n"
    "¬´üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π."
)

@bot.message_handler(commands=["start"])
def cmd_start(m):
    db=_load(); get_user(db, m.from_user.id); _save(db)
    if is_admin(m.from_user.id):  # –∞–¥–º–∏–Ω–∞–º –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–º–∏—É–º
        set_premium(m.from_user.id, 3650)
    bot.send_message(m.chat.id, WELCOME, reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["check"])
def check_premium(m):
    if has_premium(m.from_user.id):
        u=_load().get(str(m.from_user.id),{})
        exp=datetime.datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["buy"])
def buy_premium(m):
    price=get_current_price()
    kb=InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_stars"))
    bot.send_message(m.chat.id,
        f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n–¶–µ–Ω–∞: {price} ‚≠ê",
        reply_markup=kb
    )

# ===== –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò (—Å—Ç–∞—Ç—É—Å + –ò–ò) =====
def ai_call(prompt:str)->str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —á–∞—Ç–∞ OpenAI. –ù—É–∂–µ–Ω OPENAI_API_KEY.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–±—ç–∫.
    """
    if not OPENAI_API_KEY:
        return "‚ö†Ô∏è –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)."
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä. –ü–∏—à–∏ —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                      {"role":"user","content":prompt}]
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ò–ò –æ—à–∏–±–∫–∞: {e}"

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["recipes"])
def recipes_menu(m):
    kb=InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç –Ω–∞ 600 –∫–∫–∞–ª", callback_data="rx_600"))
    kb.add(InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="rx_custom"))
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data in ("rx_600","rx_custom"))
def recipes_actions(c):
    if c.data=="rx_600":
        t = temp_message(c.message.chat.id, "üç≥ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶")
        send_typing(c.message.chat.id, "typing", 2)
        txt = ai_call("–°–¥–µ–ª–∞–π –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ ~600 –∫–∫–∞–ª. –î–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π, —à–∞–≥–∏ –∏ –ö/–ë/–ñ/–£ –≤ –∫–æ–Ω—Ü–µ.")
        delete_temp(t)
        bot.send_message(c.message.chat.id, txt, reply_markup=main_menu(c.from_user.id))
    else:
        bot.answer_callback_query(c.id)
        msg = bot.send_message(c.message.chat.id, "–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π —Ä–µ—Ü–µ–ø—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω (–≤–∫—É—Å/–ø—Ä–æ–¥—É–∫—Ç—ã/–∫–∞–ª–æ—Ä–∏–∏)‚Ä¶", reply_markup=back_menu())
        bot.register_next_step_handler(msg, recipe_custom_step)

def recipe_custom_step(m):
    if m.text==MAIN_BTNS["back"]:
        bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    t = temp_message(m.chat.id, "üç≥ –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç‚Ä¶")
    send_typing(m.chat.id, "typing", 3)
    txt = ai_call(f"–°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: ¬´{m.text}¬ª. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø–æ—Ä—Ü–∏–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —à–∞–≥–∏ –∏ –ö/–ë/–ñ/–£.")
    delete_temp(t)
    bot.send_message(m.chat.id, txt, reply_markup=main_menu(m.from_user.id))

# ===== –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É =====
def parse_list_to_items(text:str):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞:
    '–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{'name':..., 'gram':...}, ...]
    """
    raw = [p.strip() for p in text.replace("\n"," ").split(";") if p.strip()]
    items=[]
    for p in raw:
        # –º—è–≥–∫–∏–π —Ä–∞–∑–±–æ—Ä, –ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞
        grams = None
        name = p
        # –≤—ã—Ü–µ–ø–∏–º —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤
        import re
        g = re.search(r'(\d+)\s*(–≥|–≥—Ä|–≥—Ä–∞–º|–≥—Ä–∞–º–º|grams?)?', p, re.I)
        if g:
            grams = int(g.group(1))
            name = p[:g.start()].strip() or p[g.end():].strip()
        if not grams:
            # –ø–æ–ø—Ä–æ—Å–∏–º –ò–ò –¥–æ–≥–∞–¥–∞—Ç—å—Å—è
            guess = ai_call(f"–í —Ñ—Ä–∞–∑–µ ¬´{p}¬ª –Ω–∞–π–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤, –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî 0.")
            try: grams = int(guess)
            except: grams = 0
        name = name.strip(" ,.-")
        if not name:
            name = ai_call(f"–í —Ñ—Ä–∞–∑–µ ¬´{p}¬ª –≤—ã–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫—Ä–∞—Ç–∫–æ). –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        if grams<=0:
            return None, f"–ù–µ –ø–æ–Ω—è–ª –ø–æ–∑–∏—Ü–∏—é: ¬´{p}¬ª"
        items.append({"name": name, "gram": grams})
    return items, None

def estimate_kbju_items(items):
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ä–∞—Å—á—ë—Ç —á–µ—Ä–µ–∑ –ò–ò (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ—é —Ç–∞–±–ª–∏—Ü—É).
    –ù–∞ –≤—Ö–æ–¥: [{'name','gram'}]. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–∞–ª,–±,–∂,—É,–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)
    """
    if not OPENAI_API_KEY:
        # —Ñ–æ–ª–±—ç–∫
        kcal = sum(max(int(i["gram"]*1.2), 0) for i in items)
        return kcal, round(kcal/10), round(kcal/20), round(kcal/6), "‚ö†Ô∏è –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –ò–ò."

    prompt = (
        "–û—Ü–µ–Ω–∏ –ö/–ë/–ñ/–£ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–æ–π. "
        "–î–∞–π —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É.\n\n"
        + "\n".join([f"- {it['name']} {it['gram']} –≥" for it in items]) +
        "\n\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "–ò—Ç–æ–≥: –•–•–• –∫–∫–∞–ª, –ë/–ñ/–£: B/G/C\n"
        "–ü–æ –ø–æ–∑–∏—Ü–∏—è–º: ... (–∫—Ä–∞—Ç–∫–æ)\n"
    )
    txt = ai_call(prompt)
    # –ü–æ–≤–µ—Ä–∏–º –Ω–∞ —Å–ª–æ–≤–æ –ò–ò –∏ –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç. –î–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —á–∏—Å–ª–∞:
    import re
    kcal = re.search(r'(\d{2,5})\s*–∫–∫–∞–ª', txt)
    b = re.search(r'–ë[:\s]*([0-9]+)', txt, re.I)
    g = re.search(r'–ñ[:\s]*([0-9]+)', txt, re.I)
    c = re.search(r'–£[:\s]*([0-9]+)', txt, re.I)
    K = int(kcal.group(1)) if kcal else 0
    B = int(b.group(1)) if b else 0
    G = int(g.group(1)) if g else 0
    C = int(c.group(1)) if c else 0
    return K, B, G, C, txt

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["list"])
def kbju_list_prompt(m):
    if not (has_premium(m.from_user.id) or has_trial(m.from_user.id)):
        mark_trial(m.from_user.id, 24)
        bot.send_message(m.chat.id, "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ\n–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ‚Ä¶¬ª.", reply_markup=back_menu())
    else:
        bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ‚Ä¶¬ª.", reply_markup=back_menu())
    bot.register_next_step_handler(m, kbju_list_calc)

def kbju_list_calc(m):
    if m.text==MAIN_BTNS["back"]:
        bot.send_message(m.chat.id, "–û–∫, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    items, err = parse_list_to_items(m.text)
    if err:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=back_menu())
        bot.register_next_step_handler(m, kbju_list_calc); return
    t=temp_message(m.chat.id, "üßÆ –°—á–∏—Ç–∞—é –ö–ë–ñ–£‚Ä¶")
    send_typing(m.chat.id, "typing", 2)
    kcal,B,G,C,detail = estimate_kbju_items(items)
    delete_temp(t)
    lines = [f"<b>–ò—Ç–æ–≥:</b> ~{kcal} –∫–∫–∞–ª, –ë/–ñ/–£: {B}/{G}/{C}", "", "<b>–î–µ—Ç–∞–ª–∏:</b>", detail]
    bot.send_message(m.chat.id, "\n".join(lines), reply_markup=main_menu(m.from_user.id))
    # bot.py (—á–∞—Å—Ç—å 3/4)

# ===== –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ (OpenAI Vision) =====
def ai_vision_kbju(photo_url:str)->str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç URL —Ñ–æ—Ç–æ –≤ –º–æ–¥–µ–ª—å, –ø—Ä–æ—Å–∏—Ç –Ω–∞–∑–≤–∞—Ç—å –±–ª—é–¥–æ/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –æ—Ü–µ–Ω–∏—Ç—å –ö–ë–ñ–£.
    –í–µ—Ä–Ω—ë—Ç –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç.
    """
    if not OPENAI_API_KEY:
        return "‚ö†Ô∏è –ò–ò-–≤–∏–∑–∏–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)."
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        prompt = (
            "–û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–æ –ø–æ —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—á–∏—Å–ª–∏ 3‚Äì6 –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n"
            "–ó–∞—Ç–µ–º –æ—Ü–µ–Ω–∏ —Å—É–º–º–∞—Ä–Ω—ã–µ –ö/–ë/–ñ/–£ –ø–æ—Ä—Ü–∏–∏. –í—ã–≤–µ–¥–∏ —Ç–∞–∫:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ: ...\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ...\n–ò—Ç–æ–≥: –•–•–• –∫–∫–∞–ª; –ë/–ñ/–£: B/G/C\n"
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Ç–æ—á–µ–Ω."},
                {"role":"user","content":[
                    {"type":"text","text":prompt},
                    {"type":"image_url","image_url":{"url":photo_url}}
                ]}
            ]
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}"

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["photo"])
def kbju_photo_hint(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ù–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏—à–ª—é –ö–ë–ñ–£.", reply_markup=back_menu())

@bot.message_handler(content_types=['photo'])
def on_photo(m):
    # —Å—Ç–∞—Ç—É—Å
    s = temp_message(m.chat.id, "üß† –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ö–ë–ñ–£‚Ä¶")
    try:
        send_typing(m.chat.id, "upload_photo", 3)
        # –≤–æ–∑—å–º—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
        file_id = m.photo[-1].file_id
        fi = bot.get_file(file_id)
        # –ø—É–±–ª–∏—á–Ω—ã–π URL —É Telegram –Ω–µ—Ç, –Ω–æ API –æ—Ç–¥–∞—ë—Ç path -> —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É CDN
        # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–∫–∞—á–∞—Ç—å –∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞ filesend ‚Äî –Ω–æ Render –±–µ–∑ –¥–∏—Å–∫–∞. 
        # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É Telegram Files:
        photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{fi.file_path}"
        txt = ai_vision_kbju(photo_url)
        delete_temp(s)
        bot.send_message(m.chat.id, txt, reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        delete_temp(s)
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}", reply_markup=main_menu(m.from_user.id))

# ===== –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é =====
GOAL_BTNS = ["üèÉ –ü–æ—Ö—É–¥–µ–Ω–∏–µ","‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ","üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã"]
SEX_BTNS  = ["üë® –ú—É–∂—á–∏–Ω–∞","üë© –ñ–µ–Ω—â–∏–Ω–∞"]

def ask_profile(m):
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(SEX_BTNS[0]), KeyboardButton(SEX_BTNS[1]))
    bot.send_message(m.chat.id, "–£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=kb)
    bot.register_next_step_handler(m, prof_sex)

def prof_sex(m):
    if m.text not in SEX_BTNS:
        bot.register_next_step_handler(m, prof_sex); return
    db=_load(); u=get_user(db, m.from_user.id); u["profile"]["sex"]= "male" if "–ú—É–∂—á–∏–Ω–∞" in m.text else "female"; _save(db)
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 178):", reply_markup=back_menu())
    bot.register_next_step_handler(msg, prof_height)

def prof_height(m):
    if m.text==MAIN_BTNS["back"]:
        bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(m.from_user.id)); return
    try:
        h=int(m.text); assert 120<=h<=230
        db=_load(); u=get_user(db, m.from_user.id); u["profile"]["height"]=h; _save(db)
        msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 74):", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_weight)
    except:
        msg = bot.send_message(m.chat.id,"–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 120 –¥–æ 230. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_height)

def prof_weight(m):
    if m.text==MAIN_BTNS["back"]:
        bot.send_message(m.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(m.from_user.id)); return
    try:
        w=float(m.text); assert 30<=w<=300
        db=_load(); u=get_user(db, m.from_user.id); u["profile"]["weight"]=float(w); _save(db)
        kb=ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row(*[KeyboardButton(x) for x in GOAL_BTNS])
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=kb)
        bot.register_next_step_handler(m, prof_goal)
    except:
        msg = bot.send_message(m.chat.id,"–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:", reply_markup=back_menu())
        bot.register_next_step_handler(msg, prof_weight)

def prof_goal(m):
    if m.text not in GOAL_BTNS:
        bot.register_next_step_handler(m, prof_goal); return
    db=_load(); u=get_user(db, m.from_user.id)
    goal_map={"üèÉ –ü–æ—Ö—É–¥–µ–Ω–∏–µ":"cut","‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ":"maintain","üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã":"bulk"}
    u["profile"]["goal"]=goal_map[m.text]; _save(db)
    build_week_menu(m)

def bmr_mifflin(sex, w, h, age=30):
    # –≥—Ä—É–±–æ, –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30
    s = 5 if sex=="male" else -161
    return 10*w + 6.25*h - 5*age + s

def build_week_menu(m):
    uid=m.from_user.id
    if not has_premium(uid):
        # –∞–Ω–∫–µ—Ç—É –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–µ–∑ –ø—Ä–µ–º–∏—É–º–∞ -> –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏–º –æ–ø–ª–∞—Ç—É
        bot.send_message(m.chat.id, "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è. –û—Ñ–æ—Ä–º–∏ –ø—Ä–µ–º–∏—É–º –≤ –º–µ–Ω—é.", reply_markup=main_menu(uid))
        return
    db=_load(); u=get_user(db, uid); p=u.get("profile",{})
    if not {"sex","height","weight","goal"}<=set(p.keys()):
        ask_profile(m); return
    # –æ—Ü–µ–Ω–∏–º –∫–∞–ª–æ—Ä–∏–∏
    kcal = round(bmr_mifflin(p["sex"], p["weight"], p["height"]) * (1.35 if p["goal"]!="bulk" else 1.55))
    if p["goal"]=="cut": kcal-=300
    if p["goal"]=="bulk": kcal+=300

    t=temp_message(m.chat.id, "üóìÔ∏è –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –ø–æ–¥ –≤–∞—Å!")
    send_typing(m.chat.id, "typing", 4)
    prompt = (
        "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π (–ü–Ω..–í—Å) –ø–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"–ü–æ–ª: {('–º—É–∂—á–∏–Ω–∞' if p['sex']=='male' else '–∂–µ–Ω—â–∏–Ω–∞')}, –†–æ—Å—Ç: {p['height']} —Å–º, –í–µ—Å: {p['weight']} –∫–≥, "
        f"–¶–µ–ª—å: {p['goal']}.\n"
        f"–î–Ω–µ–≤–Ω–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å ~{kcal} –∫–∫–∞–ª. –ù–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∞–π 4‚Äì5 –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏, –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏ –≥—Ä–∞–º–º–æ–≤–∫–∏. "
        "–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: –ü–Ω:, –í—Ç:, –°—Ä:, –ß—Ç:, –ü—Ç:, –°–±:, –í—Å:. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è ‚Äî –∏—Ç–æ–≥–æ –∫–∫–∞–ª –∏ –ë/–ñ/–£."
    )
    txt = ai_call(prompt)
    delete_temp(t)
    bot.send_message(m.chat.id, f"<b>–¢–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä:</b> ~{kcal} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n{txt}", reply_markup=main_menu(uid))

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["menu"])
def start_menu_wizard(m):
    ask_profile(m)

# ===== –ê–¥–º–∏–Ω–∫–∞ (callback-based, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–æ) =====
def admin_kb():
    kb=InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
           InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_prem"))
    kb.row(InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="adm_broadcast"),
           InlineKeyboardButton("‚úèÔ∏è –ò–∑–º. –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="adm_welcome"))
    kb.row(InlineKeyboardButton("üíµ –ò–∑–º. —Ü–µ–Ω—É (–∑–≤—ë–∑–¥—ã)", callback_data="adm_price"))
    return kb

@bot.message_handler(func=lambda x: x.text==MAIN_BTNS["admin"])
def admin_entry(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu(m.from_user.id)); return
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb())

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    if not is_admin(c.from_user.id):
        bot.answer_callback_query(c.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"); return
    db=_load()
    if c.data=="adm_users":
        total=len([k for k in db.keys() if k!="__payments__"])
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ: <b>{total}</b>")
    elif c.data=="adm_prem":
        now=int(time.time())
        active=sum(1 for u in db.values() if isinstance(u,dict) and u.get("premium") and u.get("premium_until",0)>now)
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif c.data=="adm_price":
        bot.send_message(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(c.message, admin_price_step)
    elif c.data=="adm_broadcast":
        bot.send_message(c.message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫.")
        bot.register_next_step_handler(c.message, admin_broadcast_step)
    elif c.data=="adm_welcome":
        bot.send_message(c.message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (/start).")
        bot.register_next_step_handler(c.message, admin_welcome_step)

def admin_price_step(m):
    if not is_admin(m.from_user.id): return
    try:
        new=int(m.text.strip()); os.environ["STAR_PRICE_PREMIUM"]=str(new)
        bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_broadcast_step(m):
    if not is_admin(m.from_user.id): return
    txt=m.text.strip()
    db=_load()
    sent=0
    for k,u in db.items():
        if k=="__payments__": continue
        try:
            bot.send_message(int(k), f"üì£ {txt}")
            sent+=1
            time.sleep(0.05)
        except: pass
    bot.reply_to(m, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

def admin_welcome_step(m):
    if not is_admin(m.from_user.id): return
    global WELCOME
    WELCOME = m.text.strip()
    bot.reply_to(m, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    # bot.py (—á–∞—Å—Ç—å 4/4)

# ===== –û–ø–ª–∞—Ç–∞ Stars =====
@bot.callback_query_handler(func=lambda c: c.data=="buy_stars")
def buy_stars(c):
    price = get_current_price()
    prices = [LabeledPrice(label=f"–ü—Ä–µ–º–∏—É–º {PREMIUM_DAYS} –¥–Ω–µ–π", amount=price)]
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",            # Stars –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω–∞
        currency="XTR",
        prices=prices,
        is_flexible=False
    )
    bot.answer_callback_query(c.id)

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try: bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e: print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp=m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id, total, payload)
            u=_load().get(str(m.from_user.id),{})
            exp=datetime.datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y")
            bot.send_message(m.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
        else:
            if total: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ===== –ú–∏–Ω–∏-–≤–µ–± –¥–ª—è Render (–∏ –∞–ø—Ç–∞–π–º–∞) =====
def run_web():
    try:
        from flask import Flask
        app = Flask(__name__)
        @app.get("/")
        def index(): return "Bot is running"
        port = int(os.getenv("PORT", "10000"))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        print("web warn:", e)

# ===== –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ =====
def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    # –∞–¥–º–∏–Ω–∞–º ‚Äî –ø—Ä–µ–º–∏—É–º –Ω–∞–≤—Å–µ–≥–¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ)
    for aid in list(ADMIN_IDS):
        try: set_premium(aid, 3650)
        except: pass

    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫, –ø–æ–¥–Ω–∏–º–∞–µ–º –º–∏–Ω–∏-–≤–µ–± –∏ polling
    try:
        bot.remove_webhook(drop_pending_updates=True)
    except Exception as e:
        print("remove_webhook warn:", e)

    threading.Thread(target=run_web, daemon=True).start()
    threading.Thread(target=auto_restart, daemon=True).start()

    print("‚úÖ Bot started")
    while True:
        try:
            bot.infinity_polling(skip_pending=True, timeout=90, long_polling_timeout=30)
        except KeyboardInterrupt:
            break
        except Exception as e:
            print("polling error:", e)
            time.sleep(3)
