# ---------- bot.py (–ß–∞—Å—Ç—å 1) ----------
import os
import json
import time
import datetime
import threading

import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ========= –ö–û–ù–§–ò–ì =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set in environment variables")

# –¶–µ–Ω–∞ –∏ —Å—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))   # ‚≠ê
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))

# --- —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ---
def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try:
            ids.add(int(os.getenv("ADMIN_ID")))
        except:
            pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit():
                ids.add(int(x))
    if not ids:
        ids.add(123456789)  # <- –∑–∞–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–¥–∞–π ADMIN_ID/ADMIN_IDS –≤ Render
    return ids

ADMIN_IDS = _parse_admins()
def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —à–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è ‚Äú–ù–∞–∑–∞–¥‚Äù –∏ next-step)
USER_FLOW = {}  # {user_id: {"step": "..."}}

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"   # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
# {
#   "<uid>": {"joined":ts,"premium":bool,"premium_until":ts, "trial_until": ts|0},
#   "__payments__":[{"uid":..., "stars":int, "ts":ts, "payload":str}]
# }
# ---------- bot.py (–ß–∞—Å—Ç—å 2) ----------
# ====== –ë–∞–∑–∞ ======
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save(db):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db, uid: int):
    s = str(uid)
    if s not in db:
        db[s] = {
            "joined": int(time.time()),
            "premium": False,
            "premium_until": 0,
            "trial_until": 0   # 24—á –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ñ–∏—á
        }
    return db[s]

# ====== –ü—Ä–µ–º–∏—É–º ======
def set_premium(uid: int, days: int):
    db = _load()
    u = get_user(db, uid)
    now = int(time.time())
    base = u["premium_until"] if u["premium_until"] > now else now
    u["premium_until"] = base + days * 86400
    u["premium"] = True
    db[str(uid)] = u
    _save(db)

def has_premium(uid: int) -> bool:
    db = _load()
    u = db.get(str(uid))
    if not u:
        return False
    if u["premium"] and u["premium_until"] > int(time.time()):
        return True
    # –∞–≤—Ç–æ-—Å–±—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    if u["premium"] and u["premium_until"] <= int(time.time()):
        u["premium"] = False
        db[str(uid)] = u
        _save(db)
    return False

def ensure_trial(uid: int):
    """–í—ã–¥–∞—Ç—å 24—á trial –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–∏—á (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª—Å—è)."""
    db = _load()
    u = get_user(db, uid)
    if u.get("trial_until", 0) == 0:
        u["trial_until"] = int(time.time()) + 24 * 3600
        db[str(uid)] = u
        _save(db)

def trial_active(uid: int) -> bool:
    db = _load()
    u = db.get(str(uid), {})
    return int(u.get("trial_until", 0)) > int(time.time())

def log_payment(uid: int, stars: int, payload: str):
    db = _load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

def get_current_price() -> int:
    try:
        return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except:
        return STAR_PRICE_PREMIUM_DEFAULT

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def reset_flow(uid: int):
    USER_FLOW.pop(uid, None)

def ask_and_wait(chat_id: int, text: str, next_func):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    sent = bot.send_message(chat_id, text, parse_mode=None)
    bot.register_next_step_handler(sent, next_func)

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
BTN_KBJU_PHOTO = "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"
BTN_KBJU_LIST  = "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"
BTN_RECIPES    = "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"
BTN_WEEK_MENU  = "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"
BTN_BUY        = "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
BTN_CHECK      = "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
BTN_BACK       = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_ADMIN      = "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"

def main_menu(uid: int = None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(BTN_KBJU_PHOTO), KeyboardButton(BTN_KBJU_LIST))
    kb.row(KeyboardButton(BTN_RECIPES), KeyboardButton(BTN_WEEK_MENU))
    kb.row(KeyboardButton(BTN_BUY),     KeyboardButton(BTN_CHECK))
    if uid and is_admin(uid):
        kb.row(KeyboardButton(BTN_ADMIN))
    return kb

def back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(BTN_BACK))
    return kb
    # ---------- bot.py (–ß–∞—Å—Ç—å 3) ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db = _load(); get_user(db, m.from_user.id); _save(db)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
        f"‚Ä¢ ¬´{BTN_KBJU_PHOTO}¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
        f"‚Ä¢ ¬´{BTN_KBJU_LIST}¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
        f"–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´{BTN_WEEK_MENU}¬ª.\n"
        f"¬´{BTN_RECIPES}¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
        "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π.",
        reply_markup=main_menu(m.from_user.id)
    )
    reset_flow(m.from_user.id)

@bot.message_handler(func=lambda m: m.text == BTN_BACK)
def go_back(m):
    reset_flow(m.from_user.id)
    bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id))

# ====== –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ + 24—á trial) ======
@bot.message_handler(func=lambda m: m.text == BTN_KBJU_LIST)
def kbju_list_ask(m):
    ensure_trial(m.from_user.id)
    if not trial_active(m.from_user.id) and not has_premium(m.from_user.id):
        bot.send_message(m.chat.id, "üîí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu(m.from_user.id))
        return
    USER_FLOW[m.from_user.id] = {"step": "kbju_list"}
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ...¬ª.", reply_markup=back_menu())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "kbju_list")
def kbju_list_calc(m):
    txt = (m.text or "").strip()
    if txt == BTN_BACK:
        return go_back(m)

    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è ‚Äú–Ω–µ–π—Ä–æ—Å–µ—Ç—å‚Äù :) ‚Äî –ø–∞—Ä—Å–∏–º —à–∞–±–ª–æ–Ω –∏ —Å—á–∏—Ç–∞–µ–º ~1 –∫–∫–∞–ª/–≥—Ä–∞–º–º
    total_g = 0
    items = [x.strip() for x in txt.split(";") if x.strip()]
    parsed = []
    for it in items:
        # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ ‚Äî –∫–∞–∫ –≥—Ä–∞–º–º—ã
        grams = 0
        num = ""
        for ch in it:
            if ch.isdigit():
                num += ch
            elif num:
                break
        if num:
            grams = int(num)
        name = it.replace(num, "").replace("–≥", "").strip(" .,-")
        if grams <= 0 or not name:
            continue
        parsed.append((name, grams))
        total_g += grams

    if not parsed:
        bot.reply_to(m, "–ù–µ –ø–æ–Ω—è–ª —Å–ø–∏—Å–æ–∫ ü§î –ü—Ä–∏—à–ª–∏ —Ç–∞–∫: ¬´–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥¬ª.", reply_markup=back_menu())
        return

    # –Ω–∞ –∫–æ–ª–µ–Ω–∫–µ: –∫–∞–ª–æ—Ä–∏–∏ ‚âà 1 –∫–∫–∞–ª/–≥, –ë–ñ–£ ‚Äî —É—Å–ª–æ–≤–Ω–æ
    kcal = total_g * 1.0
    protein = round(total_g * 0.15, 1)
    fat = round(total_g * 0.08, 1)
    carbs = round(total_g * 0.12, 1)

    lines = [f"‚Ä¢ {n} ‚Äî {g} –≥" for n, g in parsed]
    bot.send_message(
        m.chat.id,
        "üßæ –í–∞—à —Å–ø–∏—Å–æ–∫:\n" + "\n".join(lines) +
        f"\n\n–ò—Ç–æ–≥–æ: <b>{kcal:.0f} –∫–∫–∞–ª</b>\n–ë: <b>{protein} –≥</b>, –ñ: <b>{fat} –≥</b>, –£: <b>{carbs} –≥</b>",
        reply_markup=main_menu(m.from_user.id)
    )
    reset_flow(m.from_user.id)

# ====== –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ (–∑–∞–≥–ª—É—à–∫–∞) ======
@bot.message_handler(func=lambda m: m.text == BTN_KBJU_PHOTO)
def kbju_photo_hint(m):
    ensure_trial(m.from_user.id)
    if not trial_active(m.from_user.id) and not has_premium(m.from_user.id):
        bot.send_message(m.chat.id, "üîí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu(m.from_user.id))
        return
    USER_FLOW[m.from_user.id] = {"step": "kbju_photo_wait"}
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥a –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=back_menu())

@bot.message_handler(content_types=["photo"])
def kbju_photo_stub(m):
    step = USER_FLOW.get(m.from_user.id, {}).get("step")
    if step != "kbju_photo_wait":
        return  # –∏–≥–Ω–æ—Ä–∏–º —á—É–∂–∏–µ —Ñ–æ—Ç–æ
    # –ë–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    bot.send_message(m.chat.id, "üì∑ –ü—Ä–∏–Ω—è–ª —Ñ–æ—Ç–æ. –û—Ü–µ–Ω–∫–∞ –ö–ë–ñ–£ (stub): ~450 –∫–∫–∞–ª.\n(–î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∏ –ø—Ä–µ–º–∏—É–º –∏ –ò–ò-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ).",
                     reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

# ====== –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò (–±–µ–∑ –ø—Ä–µ–º–∏—É–º–∞; –ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É) ======
@bot.message_handler(func=lambda m: m.text == BTN_RECIPES)
def recipes_ask(m):
    USER_FLOW[m.from_user.id] = {"step": "recipes"}
    bot.send_message(m.chat.id, "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å? –ü—Ä–∏–º–µ—Ä: ¬´–±–ª–∏–Ω—á–∏–∫–∏¬ª, ¬´–ø–∞—Å—Ç–∞ 600 –∫–∫–∞–ª¬ª, ¬´–∫—É—Ä–∏—Ü–∞ –∏ —Ä–∏—Å¬ª.", reply_markup=back_menu())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "recipes")
def recipes_generate(m):
    if m.text == BTN_BACK:
        return go_back(m)
    q = (m.text or "").lower()
    # —Å—É–ø–µ—Ä-–ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)
    if "–±–ª–∏–Ω" in q:
        txt = "ü•û –ë–ª–∏–Ω—á–∏–∫–∏ (‚âà 600 –∫–∫–∞–ª): —è–π—Ü–æ, –º–æ–ª–æ–∫–æ, –º—É–∫–∞, —â–µ–ø–æ—Ç–∫–∞ —Å–∞—Ö–∞—Ä–∞ –∏ —Å–æ–ª–∏. –°–∫–æ–≤–æ—Ä–æ–¥–∞, 2‚Äì3 –º–∏–Ω/—Å—Ç–æ—Ä–æ–Ω–∞."
    elif "–ø–∞—Å—Ç–∞" in q or "–º–∞–∫–∞—Ä–æ–Ω" in q:
        txt = "üçù –ü–∞—Å—Ç–∞ 600 –∫–∫–∞–ª: —Å–≤–∞—Ä–∏—Ç—å –ø–∞—Å—Ç—É 80‚Äì100 –≥ —Å—É—Ö., —Å–æ—É—Å –∏–∑ —Ç–æ–º–∞—Ç–æ–≤, —á–µ—Å–Ω–æ–∫–∞, –æ–ª–∏–≤–∫. –º–∞—Å–ª–∞; –Ω–∞—Ç—ë—Ä—Ç—ã–π —Å—ã—Ä."
    else:
        txt = "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç: –∑–∞–ø–µ—á—å –∫—É—Ä–∏—Ü—É —Å –æ–≤–æ—â–∞–º–∏ 25‚Äì30 –º–∏–Ω –ø—Ä–∏ 200¬∞C, –ø–æ–¥–∞—Ç—å —Å —Ä–∏—Å–æ–º. –ü—Ä–∏–º–µ—Ä–Ω–æ 600‚Äì700 –∫–∫–∞–ª."
    bot.send_message(m.chat.id, txt, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

# ====== –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–∞–Ω–∫–µ—Ç–∞ ‚Üí –ø—Ä–µ–º–∏—É–º) ======
@bot.message_handler(func=lambda m: m.text == BTN_WEEK_MENU)
def week_menu_ask(m):
    USER_FLOW[m.from_user.id] = {"step": "anketa_w", "ank": {}}
    ask_and_wait(m.chat.id, "–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –≤ —Å–º:", week_menu_q_height)

def week_menu_q_height(m):
    if m.text == BTN_BACK:
        return go_back(m)
    try:
        h = int(m.text.strip())
        USER_FLOW[m.from_user.id]["ank"]["h"] = h
        ask_and_wait(m.chat.id, "–í–µ—Å –≤ –∫–≥:", week_menu_q_weight)
    except:
        ask_and_wait(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –†–æ—Å—Ç –≤ —Å–º:", week_menu_q_height)

def week_menu_q_weight(m):
    if m.text == BTN_BACK:
        return go_back(m)
    try:
        w = float(m.text.strip().replace(",", "."))
        USER_FLOW[m.from_user.id]["ank"]["w"] = w
        ask_and_wait(m.chat.id, "–¶–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ / –Ω–∞–±–æ—Ä", week_menu_q_goal)
    except:
        ask_and_wait(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–µ—Å –≤ –∫–≥:", week_menu_q_weight)

def week_menu_q_goal(m):
    if m.text == BTN_BACK:
        return go_back(m)
    goal = (m.text or "").strip().lower()
    USER_FLOW[m.from_user.id]["ank"]["goal"] = goal

    if not has_premium(m.from_user.id):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞ {get_current_price()} ‚≠ê", callback_data="buy_premium_stars"))
        bot.send_message(
            m.chat.id,
            "üîí –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è. –ö—É–ø–∏ –ø—Ä–µ–º–∏—É–º, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Ü–∏–æ–Ω –ø–æ–¥ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.",
            reply_markup=kb
        )
        reset_flow(m.from_user.id)
        return

    ank = USER_FLOW[m.from_user.id]["ank"]
    plan = f"üìÖ –ú–µ–Ω—é (—á–µ—Ä–Ω–æ–≤–∏–∫): —Ü–µ–ª—å ‚Äî {ank['goal']}, —Ä–æ—Å—Ç {ank['h']} —Å–º, –≤–µ—Å {ank['w']} –∫–≥.\n" \
           f"–î–µ–Ω—å 1: –∑–∞–≤—Ç—Ä–∞–∫ –æ–≤—Å—è–Ω–∫–∞, –æ–±–µ–¥ –∫—É—Ä–∏—Ü–∞+—Ä–∏—Å, —É–∂–∏–Ω —Å–∞–ª–∞—Ç.\n–î–∞–ª–µ–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏."
    bot.send_message(m.chat.id, plan, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)
    # ---------- bot.py (–ß–∞—Å—Ç—å 4) ----------
@bot.message_handler(func=lambda m: m.text == BTN_CHECK)
def check_premium(m):
    if has_premium(m.from_user.id):
        db = _load(); u = db.get(str(m.from_user.id), {})
        exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == BTN_BUY)
def buy_premium(m):
    price = get_current_price()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars"))
    bot.send_message(m.chat.id, f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n–¶–µ–Ω–∞: {price} ‚≠ê", reply_markup=kb)

# ====== Stars invoice ======
@bot.callback_query_handler(func=lambda c: c.data == "buy_premium_stars")
def cb_buy_premium_stars(c):
    # —É–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    try:
        bot.answer_callback_query(c.id)
    except Exception:
        pass

    price_now = get_current_price()
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=price_now)]
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",      # –¥–ª—è Stars —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
        currency="XTR",
        prices=prices,
        is_flexible=False
    )

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try:
        bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e:
        print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp = m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id, total, payload)
            db = _load(); u = db.get(str(m.from_user.id), {})
            exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
            bot.send_message(m.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.",
                             reply_markup=main_menu(m.from_user.id))
        else:
            if total: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ====== –ê–î–ú–ò–ù–ö–ê ======
@bot.message_handler(func=lambda m: m.text in (BTN_ADMIN, "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu(m.from_user.id))
        return
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
        InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums")
    )
    kb.row(
        InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_grant"),
        InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_revoke")
    )
    kb.row(
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–≥)", callback_data="adm_income"),
        InlineKeyboardButton("üíµ –ò–∑–º. —Ü–µ–Ω—É (–∑–≤—ë–∑–¥—ã)", callback_data="adm_price")
    )
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback ‚Äî –∏–Ω–∞—á–µ –≤–µ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    try:
        bot.answer_callback_query(c.id)
    except Exception:
        pass

    if not is_admin(c.from_user.id):
        bot.send_message(c.message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    db = _load()
    data = c.data

    if data == "adm_users":
        cnt = len([k for k in db.keys() if k != "__payments__"])
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{cnt}</b>")

    elif data == "adm_premiums":
        now = int(time.time())
        active = sum(
            1 for u in db.values()
            if isinstance(u, dict) and u.get("premium") and u.get("premium_until", 0) > now
        )
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")

    elif data == "adm_income":
        pays = db.get("__payments__", [])
        total = sum(p.get("stars", 0) for p in pays)
        bot.send_message(c.message.chat.id, f"üí∞ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: <b>{total} ‚≠ê</b> ({len(pays)} –æ–ø–ª–∞—Ç)")

    elif data == "adm_grant":
        ask_and_wait(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id> [–¥–Ω–∏]` (–±–µ–∑ —Å–∫–æ–±–æ–∫).", admin_grant_step)

    elif data == "adm_revoke":
        ask_and_wait(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id>` –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–º–∏—É–º–∞.", admin_revoke_step)

    elif data == "adm_price":
        ask_and_wait(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ:", admin_price_step)

# next-step –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ñ–∏–∫—Å: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ ask_and_wait)
def admin_grant_step(m):
    if not is_admin(m.from_user.id):
        return
    try:
        parts = m.text.strip().split()
        uid = int(parts[0])
        days = int(parts[1]) if len(parts) > 1 else PREMIUM_DAYS
        set_premium(uid, days)
        bot.reply_to(m, f"‚úÖ –í—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> –Ω–∞ {days} –¥–Ω.",
                     reply_markup=main_menu(m.from_user.id))
        try:
            bot.send_message(uid, f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_revoke_step(m):
    if not is_admin(m.from_user.id):
        return
    try:
        uid = int(m.text.strip())
        db = _load()
        u = db.get(str(uid))
        if not u:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        u["premium"] = False
        u["premium_until"] = 0
        db[str(uid)] = u
        _save(db)
        bot.reply_to(m, f"‚úÖ –°–Ω—è—Ç –ø—Ä–µ–º–∏—É–º —É <code>{uid}</code>.", reply_markup=main_menu(m.from_user.id))
        try:
            bot.send_message(uid, "‚ùå –í–∞—à –ø—Ä–µ–º–∏—É–º –±—ã–ª —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_price_step(m):
    if not is_admin(m.from_user.id):
        return
    try:
        new_price = int(m.text.strip())
        os.environ["STAR_PRICE_PREMIUM"] = str(new_price)  # –º–µ–Ω—è–µ–º "–Ω–∞ –ª–µ—Ç—É"
        bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_price} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
        # ---------- bot.py (–ß–∞—Å—Ç—å 5) ----------
# ====== –ú–∏–Ω–∏-–≤–µ–± (Render Web Service ping) ======
try:
    import flask
    app = flask.Flask(__name__)

    @app.route("/")
    def index():
        return "Bot is running!"

    def run_web():
        port = int(os.getenv("PORT", 10000))
        app.run(host="0.0.0.0", port=port)

    threading.Thread(target=run_web, daemon=True).start()
except Exception:
    # –µ—Å–ª–∏ Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ä–µ–∂–∏–º–µ worker) ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    pass

# ====== –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) ======
def auto_restart():
    while True:
        time.sleep(24 * 3600)
        os._exit(0)

threading.Thread(target=auto_restart, daemon=True).start()

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
print("‚úÖ Bot started")
while True:
    try:
        bot.infinity_polling(skip_pending=True, timeout=90)
    except KeyboardInterrupt:
        break
    except Exception as e:
        print("polling error:", e)
        time.sleep(3)
