# ---------- bot.py (–ß–∞—Å—Ç—å 1) ----------
import os, json, time, datetime, threading, re
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))

def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try: ids.add(int(os.getenv("ADMIN_ID")))
        except: pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit(): ids.add(int(x))
    if not ids:
        ids.add(123456789)  # –∑–∞–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–¥–∞–π –≤ ENV
    return ids
ADMIN_IDS = _parse_admins()
def is_admin(uid:int)->bool: return uid in ADMIN_IDS

USER_FLOW = {}  # {uid: {"step": "...", ...}}

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"
# ---------- bot.py (–ß–∞—Å—Ç—å 2) ----------
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE,"w",encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE,"r",encoding="utf-8") as f: return json.load(f)
    except: return {}

def _save(db): 
    with open(DATA_FILE,"w",encoding="utf-8") as f: json.dump(db,f,ensure_ascii=False,indent=2)

def get_user(db, uid:int):
    s=str(uid)
    if s not in db:
        db[s]={"joined":int(time.time()),"premium":False,"premium_until":0,"trial_until":0}
    return db[s]

def set_premium(uid:int, days:int):
    db=_load(); u=get_user(db,uid); now=int(time.time())
    base = u["premium_until"] if u["premium_until"]>now else now
    u["premium_until"]=base+days*86400; u["premium"]=True
    db[str(uid)]=u; _save(db)

def has_premium(uid:int)->bool:
    db=_load(); u=db.get(str(uid))
    if not u: return False
    now=int(time.time())
    if u["premium"] and u["premium_until"]>now: return True
    if u["premium"] and u["premium_until"]<=now:
        u["premium"]=False; db[str(uid)]=u; _save(db)
    return False

def ensure_trial(uid:int):
    db=_load(); u=get_user(db,uid)
    if not u.get("trial_until"): 
        u["trial_until"]=int(time.time())+24*3600
        db[str(uid)]=u; _save(db)

def trial_active(uid:int)->bool:
    db=_load(); u=db.get(str(uid),{}); return int(u.get("trial_until",0))>int(time.time())

def log_payment(uid:int, stars:int, payload:str):
    db=_load(); db.setdefault("__payments__",[]).append(
        {"uid":uid,"stars":int(stars),"ts":int(time.time()),"payload":payload})
    _save(db)

def get_current_price()->int:
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

def reset_flow(uid:int): USER_FLOW.pop(uid, None)

def ask_and_wait(chat_id:int, text:str, next_func):
    msg = bot.send_message(chat_id, text, parse_mode=None)
    bot.register_next_step_handler(msg, next_func)

# –ö–Ω–æ–ø–∫–∏
BTN_KBJU_PHOTO = "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"
BTN_KBJU_LIST  = "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"
BTN_RECIPES    = "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"
BTN_WEEK_MENU  = "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"
BTN_BUY        = "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
BTN_CHECK      = "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
BTN_BACK       = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_ADMIN      = "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"

def main_menu(uid:int=None):
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton(BTN_KBJU_PHOTO), KeyboardButton(BTN_KBJU_LIST))
    kb.row(KeyboardButton(BTN_RECIPES),    KeyboardButton(BTN_WEEK_MENU))
    kb.row(KeyboardButton(BTN_BUY),        KeyboardButton(BTN_CHECK))
    if uid and is_admin(uid): kb.row(KeyboardButton(BTN_ADMIN))
    return kb

def back_menu():
    kb=ReplyKeyboardMarkup(resize_keyboard=True); kb.row(KeyboardButton(BTN_BACK)); return kb
    # ---------- bot.py (–ß–∞—Å—Ç—å 3) ----------
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db=_load(); get_user(db,m.from_user.id); _save(db)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
        f"‚Ä¢ ¬´{BTN_KBJU_PHOTO}¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
        f"‚Ä¢ ¬´{BTN_KBJU_LIST}¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
        f"–ü–æ–¥–±–µ—Ä—É –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π ‚Äî ¬´{BTN_WEEK_MENU}¬ª.\n"
        f"¬´{BTN_RECIPES}¬ª ‚Äî –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏ ¬´–Ω–∞ N –∫–∫–∞–ª¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ—Ü–µ–ø—Ç 600 –∫–∫–∞–ª).\n"
        "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π.",
        reply_markup=main_menu(m.from_user.id)
    )
    reset_flow(m.from_user.id)

@bot.message_handler(func=lambda m: m.text == BTN_BACK)
def go_back(m):
    reset_flow(m.from_user.id)
    bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id))

# ===== –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É =====
@bot.message_handler(func=lambda m: m.text == BTN_KBJU_LIST)
def kbju_list_ask(m):
    ensure_trial(m.from_user.id)
    if not trial_active(m.from_user.id) and not has_premium(m.from_user.id):
        bot.send_message(m.chat.id, "üîí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu(m.from_user.id))
        return
    USER_FLOW[m.from_user.id]={"step":"kbju_list"}
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; –†–∏—Å 180 –≥; ...¬ª.", reply_markup=back_menu())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="kbju_list")
def kbju_list_calc(m):
    if m.text == BTN_BACK: return go_back(m)
    txt=(m.text or "").strip()
    items=[x.strip() for x in txt.split(";") if x.strip()]
    parsed=[]; total_g=0
    for it in items:
        # –∏—â–µ–º —á–∏—Å–ª–æ –≥—Ä–∞–º–º–æ–≤
        grams = 0
        match = re.search(r"(\d+)", it)
        if match:
            try: grams = int(match.group(1))
            except: grams = 0
        name = re.sub(r"\d+ *–≥?","", it, flags=re.IGNORECASE).strip(" .,-")
        if grams<=0 or not name: continue
        parsed.append((name, grams)); total_g += grams
    if not parsed:
        bot.reply_to(m, "–ù–µ –ø–æ–Ω—è–ª —Å–ø–∏—Å–æ–∫ ü§î –ü—Ä–∏–º–µ—Ä: ¬´–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥¬ª.", reply_markup=back_menu()); return

    kcal = float(total_g) * 1.0
    p = round(total_g*0.15,1); f = round(total_g*0.08,1); c = round(total_g*0.12,1)
    lines=[f"‚Ä¢ {n} ‚Äî {g} –≥" for n,g in parsed]
    bot.send_message(m.chat.id,
        "üßæ –í–∞—à —Å–ø–∏—Å–æ–∫:\n"+"\n".join(lines)+
        f"\n\n–ò—Ç–æ–≥–æ: <b>{kcal:.0f} –∫–∫–∞–ª</b>\n–ë: <b>{p} –≥</b>, –ñ: <b>{f} –≥</b>, –£: <b>{c} –≥</b>",
        reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

# ===== –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ =====
@bot.message_handler(func=lambda m: m.text == BTN_KBJU_PHOTO)
def kbju_photo_hint(m):
    ensure_trial(m.from_user.id)
    if not trial_active(m.from_user.id) and not has_premium(m.from_user.id):
        bot.send_message(m.chat.id, "üîí –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º.", reply_markup=main_menu(m.from_user.id))
        return
    USER_FLOW[m.from_user.id]={"step":"kbju_photo_wait"}
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=back_menu())

@bot.message_handler(content_types=["photo"])
def kbju_photo(m):
    if USER_FLOW.get(m.from_user.id,{}).get("step")!="kbju_photo_wait": return
    # –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ (–±–µ–∑ –Ω—ã—Ç—å—è); –ø—Ä–µ–º–∏—É–º ‚Äî –ª—É—á—à–µ
    est = "‚âà450 –∫–∫–∞–ª (–æ—Ü–µ–Ω–∫–∞ –ø–æ —Ñ–æ—Ç–æ)."
    if OPENAI_API_KEY and has_premium(m.from_user.id):
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤–ª—é –≤—ã–∑–æ–≤
        est = "‚âà430‚Äì520 –∫–∫–∞–ª (–ò–ò-–æ—Ü–µ–Ω–∫–∞ –ø–æ —Ñ–æ—Ç–æ)."
    bot.send_message(m.chat.id, f"üì∑ –ì–æ—Ç–æ–≤–æ! {est}\n–ü—Ä–µ–º–∏—É–º –ø–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
                     reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

# ===== –†–µ—Ü–µ–ø—Ç—ã =====
@bot.message_handler(func=lambda m: m.text == BTN_RECIPES)
def recipes_ask(m):
    USER_FLOW[m.from_user.id]={"step":"recipes"}
    bot.send_message(m.chat.id,
        "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å? –ü—Ä–∏–º–µ—Ä—ã: ¬´–±–ª–∏–Ω—á–∏–∫–∏¬ª, ¬´–ø–∞—Å—Ç–∞¬ª, ¬´—Ä–µ—Ü–µ–ø—Ç 600 –∫–∫–∞–ª¬ª, ¬´—Å—É–ø 350 –∫–∫–∞–ª¬ª.",
        reply_markup=back_menu())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipes")
def recipes_generate(m):
    if m.text == BTN_BACK: return go_back(m)
    q=(m.text or "").lower()

    # ¬´–Ω–∞ N –∫–∫–∞–ª¬ª
    mcal = re.search(r"(\d{2,4})\s*–∫–∫–∞–ª", q)
    if mcal:
        kcal=int(mcal.group(1))
        txt = (f"üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç ~{kcal} –∫–∫–∞–ª:\n"
               f"‚Ä¢ –û—Å–Ω–æ–≤–∞: –∫—Ä—É–ø–∞/–ø–∞—Å—Ç–∞/–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ {kcal-300} –∫–∫–∞–ª\n"
               f"‚Ä¢ –ë–µ–ª–æ–∫: –∫—É—Ä–∏—Ü–∞/—Ä—ã–±–∞/—è–π—Ü–∞ ~200 –∫–∫–∞–ª\n"
               f"‚Ä¢ –û–≤–æ—â–∏/–∑–µ–ª–µ–Ω—å ~50‚Äì100 –∫–∫–∞–ª\n"
               f"‚Ä¢ –ñ–∏—Ä—ã: –ª–æ–∂–∫–∞ –º–∞—Å–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
               f"–ü—Ä–∏–º–µ—Ä: –ø–∞—Å—Ç–∞ 70 –≥ —Å—É—Ö., —Ç–æ–º–∞—Ç—ã, –∫—É—Ä. –≥—Ä—É–¥–∫–∞ 120 –≥, –Ω–µ–º–Ω–æ–≥–æ —Å—ã—Ä–∞.")
    else:
        if "–±–ª–∏–Ω" in q:
            txt = "ü•û –ë–ª–∏–Ω—á–∏–∫–∏ (‚âà 600 –∫–∫–∞–ª): —è–π—Ü–æ, –º–æ–ª–æ–∫–æ, –º—É–∫–∞, —â–µ–ø–æ—Ç–∫–∞ —Å–∞—Ö–∞—Ä–∞/—Å–æ–ª–∏; –∂–∞—Ä–∏—Ç—å 2‚Äì3 –º–∏–Ω —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã."
        elif "–ø–∞—Å—Ç–∞" in q or "–º–∞–∫–∞—Ä–æ–Ω" in q:
            txt = "üçù –ü–∞—Å—Ç–∞: –æ—Ç–≤–∞—Ä–∏—Ç—å 80‚Äì100 –≥ —Å—É—Ö., —Å–¥–µ–ª–∞—Ç—å —Å–æ—É—Å –∏–∑ —Ç–æ–º–∞—Ç–æ–≤/—á–µ—Å–Ω–æ–∫–∞/–º–∞—Å–ª–∞; –ø–æ–¥–∞—Ç—å —Å —Å—ã—Ä–æ–º."
        else:
            txt = "üë®‚Äçüç≥ –ó–∞–ø–µ—á—ë–Ω–Ω–∞—è –∫—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏ 25‚Äì30 –º–∏–Ω –ø—Ä–∏ 200¬∞C, –ø–æ–¥–∞—Ç—å —Å —Ä–∏—Å–æ–º (600‚Äì700 –∫–∫–∞–ª)."

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ –µ—Å—Ç—å OPENAI_API_KEY –∏ –ø—Ä–µ–º–∏—É–º ‚Äî –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç –ò–ò
    if OPENAI_API_KEY and has_premium(m.from_user.id):
        txt += "\n\n(–ò–ò-–≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å –ø—Ä–µ–º–∏—É–º–æ–º; –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.)"

    bot.send_message(m.chat.id, txt, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)

# ===== –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–∞–Ω–∫–µ—Ç–∞) =====
@bot.message_handler(func=lambda m: m.text == BTN_WEEK_MENU)
def week_menu_ask(m):
    USER_FLOW[m.from_user.id]={"step":"ank_w","ank":{}}
    ask_and_wait(m.chat.id, "–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –≤ —Å–º:", week_q_h)

def week_q_h(m):
    if m.text==BTN_BACK: return go_back(m)
    try:
        h=int(re.sub(r"\D","",m.text))
        if h<100 or h>260: raise ValueError
        USER_FLOW[m.from_user.id]["ank"]["h"]=h
        ask_and_wait(m.chat.id,"–í–µ—Å –≤ –∫–≥:", week_q_w)
    except:
        ask_and_wait(m.chat.id,"–¶–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 178:", week_q_h)

def week_q_w(m):
    if m.text==BTN_BACK: return go_back(m)
    try:
        w=float(m.text.replace(",",".")); 
        if w<30 or w>400: raise ValueError
        USER_FLOW[m.from_user.id]["ank"]["w"]=w
        ask_and_wait(m.chat.id,"–¶–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ / –Ω–∞–±–æ—Ä", week_q_goal)
    except:
        ask_and_wait(m.chat.id,"–¶–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 72.5:", week_q_w)

def week_q_goal(m):
    if m.text==BTN_BACK: return go_back(m)
    goal=(m.text or "").strip().lower()
    USER_FLOW[m.from_user.id]["ank"]["goal"]=goal
    if not has_premium(m.from_user.id):
        kb=InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞ {get_current_price()} ‚≠ê", callback_data="buy_premium_stars"))
        bot.send_message(m.chat.id,"üîí –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è. –ö—É–ø–∏ –ø—Ä–µ–º–∏—É–º, –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Ü–∏–æ–Ω –ø–æ–¥ –∞–Ω–∫–µ—Ç—É.", reply_markup=kb)
        reset_flow(m.from_user.id); return
    ank=USER_FLOW[m.from_user.id]["ank"]
    plan=(f"üìÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –º–µ–Ω—é: —Ü–µ–ª—å ‚Äî {ank['goal']}, —Ä–æ—Å—Ç {ank['h']} —Å–º, –≤–µ—Å {ank['w']} –∫–≥.\n"
          f"–î–µ–Ω—å 1: –æ–≤—Å—è–Ω–∫–∞/–π–æ–≥—É—Ä—Ç, –∫—É—Ä–∏—Ü–∞+—Ä–∏—Å, —Å–∞–ª–∞—Ç; –î–µ–Ω—å 2: –æ–º–ª–µ—Ç, —Ä—ã–±–∞+–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —Ç–≤–æ—Ä–æ–≥...\n"
          f"(–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∞)")
    bot.send_message(m.chat.id, plan, reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)
    # ---------- bot.py (–ß–∞—Å—Ç—å 4) ----------
@bot.message_handler(func=lambda m: m.text == BTN_CHECK)
def check_premium(m):
    if has_premium(m.from_user.id):
        db=_load(); u=db.get(str(m.from_user.id),{})
        exp=datetime.datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == BTN_BUY)
def buy_premium(m):
    price=get_current_price()
    kb=InlineKeyboardMarkup(); kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars"))
    bot.send_message(m.chat.id, f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.\n–¶–µ–Ω–∞: {price} ‚≠ê", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == "buy_premium_stars")
def cb_buy_premium_stars(c):
    try: bot.answer_callback_query(c.id)
    except: pass
    prices=[LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=get_current_price())]
    bot.send_invoice(
        chat_id=c.message.chat.id, title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="", currency="XTR", prices=prices, is_flexible=False
    )

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try: bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e: print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp=m.successful_payment; payload=sp.invoice_payload or ""; total=getattr(sp,"total_amount",None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id,total,payload)
            db=_load(); u=db.get(str(m.from_user.id),{})
            exp=datetime.datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y")
            bot.send_message(m.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –¥–æ <b>{exp}</b>.",
                             reply_markup=main_menu(m.from_user.id))
        else:
            if total: log_payment(m.from_user.id,total,payload)
            bot.send_message(m.from_user.id,"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ===== –ê–¥–º–∏–Ω–∫–∞ =====
@bot.message_handler(func=lambda m: m.text in (BTN_ADMIN, "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu(m.from_user.id)); return
    kb=InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
           InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums"))
    kb.row(InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_grant"),
           InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º (ID)",  callback_data="adm_revoke"))
    kb.row(InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–≥)", callback_data="adm_income"),
           InlineKeyboardButton("üíµ –ò–∑–º. —Ü–µ–Ω—É (–∑–≤—ë–∑–¥—ã)", callback_data="adm_price"))
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

# –í–ê–ñ–ù–û: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("adm_"))
def admin_actions(c):
    try: bot.answer_callback_query(c.id)
    except: pass
    if not is_admin(c.from_user.id):
        bot.send_message(c.message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return

    db=_load(); d=c.data
    if d=="adm_users":
        cnt=len([k for k in db.keys() if k!="__payments__"])
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{cnt}</b>")
    elif d=="adm_premiums":
        now=int(time.time())
        active=sum(1 for u in db.values() if isinstance(u,dict) and u.get("premium") and u.get("premium_until",0)>now)
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif d=="adm_income":
        pays=db.get("__payments__",[]); total=sum(p.get("stars",0) for p in pays)
        bot.send_message(c.message.chat.id, f"üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: <b>{total} ‚≠ê</b> ({len(pays)} –æ–ø–ª–∞—Ç)")
    elif d=="adm_grant":
        ask_and_wait(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id> [–¥–Ω–∏]` (–±–µ–∑ —Å–∫–æ–±–æ–∫).", admin_grant_step)
    elif d=="adm_revoke":
        ask_and_wait(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id>` –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–º–∏—É–º–∞.", admin_revoke_step)
    elif d=="adm_price":
        ask_and_wait(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ:", admin_price_step)

# —Ç–µ–∫—Å—Ç–æ–≤—ã–µ fallback-–∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text and "–≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º" in m.text.lower())
def admin_grant_fallback(m):
    ask_and_wait(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id> [–¥–Ω–∏]`.", admin_grant_step)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and m.text and "—Å–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º" in m.text.lower())
def admin_revoke_fallback(m):
    ask_and_wait(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id>`.", admin_revoke_step)

def admin_grant_step(m):
    if not is_admin(m.from_user.id): return
    try:
        parts=m.text.strip().split()
        uid=int(parts[0]); days=int(parts[1]) if len(parts)>1 else PREMIUM_DAYS
        set_premium(uid, days)
        bot.reply_to(m, f"‚úÖ –í—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> –Ω–∞ {days} –¥–Ω.",
                     reply_markup=main_menu(m.from_user.id))
        try: bot.send_message(uid, f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except: pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_revoke_step(m):
    if not is_admin(m.from_user.id): return
    try:
        uid=int(re.sub(r"\D","", m.text))
        db=_load(); u=db.get(str(uid))
        if not u: raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        u["premium"]=False; u["premium_until"]=0; db[str(uid)]=u; _save(db)
        bot.reply_to(m, f"‚úÖ –°–Ω—è—Ç –ø—Ä–µ–º–∏—É–º —É <code>{uid}</code>.", reply_markup=main_menu(m.from_user.id))
        try: bot.send_message(uid, "‚ùå –í–∞—à –ø—Ä–µ–º–∏—É–º –±—ã–ª —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except: pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_price_step(m):
    if not is_admin(m.from_user.id): return
    try:
        new_price=int(re.sub(r"\D","", m.text))
        os.environ["STAR_PRICE_PREMIUM"]=str(new_price)
        bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
        # ---------- bot.py (–ß–∞—Å—Ç—å 5) ----------
try:
    import flask
    app=flask.Flask(__name__)
    @app.route("/") 
    def index(): return "Bot is running!"
    def run_web():
        port=int(os.getenv("PORT",10000))
        app.run(host="0.0.0.0", port=port)
    threading.Thread(target=run_web, daemon=True).start()
except Exception:
    pass

def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)

threading.Thread(target=auto_restart, daemon=True).start()

print("‚úÖ Bot started")
while True:
    try:
        bot.infinity_polling(skip_pending=True, timeout=90)
    except KeyboardInterrupt:
        break
    except Exception as e:
        print("polling error:", e); time.sleep(3)
