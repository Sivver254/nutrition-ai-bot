# bot.py ‚Äî Nutrition AI Bot: Stars + Admin Premium + AI everywhere
import os, json, time, datetime, threading, re
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ====== –ö–û–ù–§–ò–ì ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))
DATA_FILE = "users.json"

def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try: ids.add(int(os.getenv("ADMIN_ID"))); 
        except: pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit(): ids.add(int(x))
    if not ids: ids.add(123456789)  # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
    return ids

ADMIN_IDS = _parse_admins()
def is_admin(uid:int) -> bool: return uid in ADMIN_IDS

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
USER_FLOW = {}     # –ø—Ä–æ—Å—Ç–∞—è FSM
WELCOME_TEXT = ("–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
                "‚Ä¢ ¬´üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
                "‚Ä¢ ¬´üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
                "–ú–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª.\n"
                "¬´üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò¬ª ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
                "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π.")

# ====== –ú–ò–ù–ò-–ë–î ======
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save(db):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db, uid:int):
    s = str(uid)
    if s not in db:
        db[s] = {"joined": int(time.time()), "premium": False, "premium_until": 0}
    return db[s]

def set_premium(uid:int, days:int):
    db = _load()
    u = get_user(db, uid)
    now = int(time.time())
    base = u["premium_until"] if u["premium_until"] > now else now
    u["premium_until"] = base + days * 86400
    u["premium"] = True
    db[str(uid)] = u
    _save(db)

def has_premium(uid:int) -> bool:
    # –∞–¥–º–∏–Ω–∞–º ‚Äî –∞–≤—Ç–æ-–ø—Ä–µ–º–∏—É–º
    if is_admin(uid):
        db = _load()
        u = get_user(db, uid)
        u["premium"] = True
        u["premium_until"] = int(time.time()) + 10*365*24*3600
        db[str(uid)] = u
        _save(db)
        return True
    db = _load(); u = db.get(str(uid))
    if not u: return False
    if u["premium"] and u["premium_until"] > int(time.time()):
        return True
    if u["premium"] and u["premium_until"] <= int(time.time()):
        u["premium"] = False
        db[str(uid)] = u; _save(db)
    return False

def log_payment(uid:int, stars:int, payload:str):
    db = _load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

def get_current_price() -> int:
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

# ====== –ò–ò (OpenAI) ======
def _get_openai_client():
    key = os.getenv("OPENAI_API_KEY") or os.getenv("openai_api_key")
    if not key:
        return None
    try:
        from openai import OpenAI
        return OpenAI(api_key=key)
    except Exception:
        return None

def ai_complete(system_prompt: str, user_prompt: str, max_tokens=600, temperature=0.4):
    client = _get_openai_client()
    if not client:
        return None
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":system_prompt},
                {"role":"user","content":user_prompt}
            ],
            temperature=temperature,
            max_tokens=max_tokens
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception:
        return None

def ai_parse_food_list(text: str):
    client = _get_openai_client()
    if not client: return None
    prompt = (
        "–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ [{\"name\":\"—Å—Ç—Ä–æ–∫–∞\",\"grams\":—á–∏—Å–ª–æ}]. "
        "–ï—Å–ª–∏ –≥—Ä–∞–º–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –ø–æ—Å—Ç–∞–≤—å 100. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞. "
        "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n\n"
        f"–í–≤–æ–¥:\n{text}"
    )
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"user","content":prompt}],
            temperature=0.1,
            max_tokens=350
        )
        raw = (resp.choices[0].message.content or "").strip()
        m = re.search(r'\[.*\]', raw, re.S)
        if not m: return None
        arr = json.loads(m.group(0))
        out = []
        for it in arr:
            name = str(it.get("name","")).strip()
            grams = it.get("grams", 100)
            try: grams = int(float(grams))
            except: grams = 100
            if name: out.append({"name":name, "grams":grams})
        return out if out else None
    except Exception:
        return None

def ai_recipe_suggestion(query: str = "", target_kcal: int | None = None) -> str:
    client = _get_openai_client()
    if not client:
        base = ("üë®‚Äçüç≥ –ü—Ä–∏–º–µ—Ä: –û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏ ‚Äî 2 —è–π—Ü–∞, 80 –≥ –ø–µ—Ä—Ü–∞, 50 –≥ —Ç–æ–º–∞—Ç–æ–≤, 10 –≥ –º–∞—Å–ª–∞.\n"
                "–û–±–∂–∞—Ä—å –æ–≤–æ—â–∏, –∑–∞–ª–µ–π —è–π—Ü–∞–º–∏, –¥–æ–≤–µ–¥–∏ –ø–æ–¥ –∫—Ä—ã—à–∫–æ–π. ~350 –∫–∫–∞–ª, –ë/–ñ/–£ 22/26/6.")
        if target_kcal: base += f"\n–¶–µ–ª—å ‚âà {target_kcal} –∫–∫–∞–ª."
        return base
    sys = ("–¢—ã –ø–æ–≤–∞—Ä-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–∞–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –≥—Ä–∞–º–º–∞–º–∏, "
           "5‚Äì7 —à–∞–≥–æ–≤, –∏—Ç–æ–≥–æ–≤—ã–µ –∫–∫–∞–ª –∏ –ë/–ñ/–£. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å ‚Äî –ø–æ–¥–≥–æ–Ω–∏ –ø–æ—Ä—Ü–∏—é.")
    user = "–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç."
    if query: user = f"–ü—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç: {query}."
    if target_kcal: user += f" –¶–µ–ª—å: {target_kcal} –∫–∫–∞–ª."
    txt = ai_complete(sys, user, max_tokens=700, temperature=0.6)
    return ("üë®‚Äçüç≥ " + txt) if txt else "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç."

def ai_estimate_kbju_from_image(image_url: str) -> str | None:
    client = _get_openai_client()
    if not client: return None
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":
                 "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ —Ñ–æ—Ç–æ –ø—Ä–∏–∫–∏–Ω—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë/–ñ/–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é. –ö—Ä–∞—Ç–∫–æ."},
                {"role":"user","content":[
                    {"type":"text","text":"–û—Ü–µ–Ω–∏ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë/–ñ/–£ –Ω–∞ —Ñ–æ—Ç–æ."},
                    {"type":"image_url","image_url":{"url": image_url}}
                ]}
            ],
            temperature=0.2,
            max_tokens=300
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception:
        return None
        # ====== –ö–ù–û–ü–ö–ò ======
def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def main_menu(uid:int=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
    kb.row(KeyboardButton("üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"), KeyboardButton("üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"))
    kb.row(KeyboardButton("üç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"), KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    if uid and is_admin(uid):
        kb.row(KeyboardButton("üõ† –ê–¥–º–∏–Ω–∫–∞"))
    return kb

# ====== –°–¢–ê–†–¢ ======
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db = _load(); get_user(db, m.from_user.id); _save(db)
    bot.send_message(m.chat.id, WELCOME_TEXT, reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def check_premium(m):
    if has_premium(m.from_user.id):
        db = _load(); u = db.get(str(m.from_user.id), {})
        exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def buy_premium(m):
    price = get_current_price()
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars")
    )
    bot.send_message(m.chat.id,
        f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n–¶–µ–Ω–∞: {price} ‚≠ê",
        reply_markup=kb
    )

# ====== –ö–ë–ñ–£ –ü–û –°–ü–ò–°–ö–£ ======
@bot.message_handler(func=lambda m: m.text == "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É")
def kbju_list_start(m):
    USER_FLOW[m.from_user.id] = {"step":"kbju_list_wait"}
    bot.reply_to(m, "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ...¬ª. "
                    "–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî –ò–ò –ø–æ–π–º—ë—Ç.", reply_markup=back_keyboard())

# –≥—Ä—É–±—ã–π —Ä–∞—Å—á—ë—Ç (–ø—Ä–∏–º–µ—Ä)
NORM_DB = {
    "–∫—É—Ä–∏—Ü–∞": (165, 31, 4, 0),
    "—Ä–∏—Å": (130, 2.7, 0.3, 28),
    "–≥—Ä–µ—á–∫–∞": (110, 3.6, 1.1, 21),
    "—è–π—Ü–æ": (157, 13, 11, 1.1),
    "—Ç–≤–æ—Ä–æ–≥": (156, 18, 5, 3)
}
def norm_name(x:str):
    x=x.lower()
    for k in NORM_DB:
        if k in x: return k
    return None

def estimate_kbju(items):
    # items: [{'name':..., 'grams':...}]
    kcal=p=f=c=0.0; det=[]
    for it in items:
        nm = norm_name(it.get("name",""))
        g = float(it.get("grams",0) or 0)
        if not nm or g<=0: 
            det.append(f"‚Ä¢ {it.get('name','?')} {int(g)} –≥ ‚Äî –Ω–µ—Ç –≤ –±–∞–∑–µ (—É—á—Ç–µ–Ω–æ 0)")
            continue
        K,P,F,C = NORM_DB[nm]
        mul = g/100.0
        kcal += K*mul; p+=P*mul; f+=F*mul; c+=C*mul
        det.append(f"‚Ä¢ {it['name']} {int(g)} –≥ ‚âà {int(K*mul)} –∫–∫–∞–ª")
    return int(kcal), int(p), int(f), int(c), "\n".join(det)

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="kbju_list_wait")
def kbju_list_calc(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None)
        bot.reply_to(m, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id)); return
    try:
        items = ai_parse_food_list(m.text) or []
        if not items:
            # –Ω–∞–∏–≤–Ω—ã–π —Ñ–æ–ª–±—ç–∫: "–Ω–∞–∑–≤–∞–Ω–∏–µ 120 –≥; ..."
            items=[]
            for part in re.split(r"[;,]\s*", m.text.strip()):
                if not part: continue
                g_m = re.search(r"(\d+)\s*–≥", part.lower())
                grams = int(g_m.group(1)) if g_m else 100
                name = re.sub(r"\d+\s*–≥","",part, flags=re.I).strip()
                items.append({"name":name, "grams":grams})
        kcal, p, f, c, det = estimate_kbju(items)
        bot.reply_to(m, f"~{kcal} –∫–∫–∞–ª, –ë/–ñ/–£ {p}/{f}/{c}\n{det}", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
    finally:
        USER_FLOW.pop(m.from_user.id, None)

# ====== –ö–ë–ñ–£ –ü–û –§–û–¢–û ======
@bot.message_handler(content_types=['photo'])
def on_photo(m):
    try:
        file_id = m.photo[-1].file_id
        f = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ: {e}", reply_markup=main_menu(m.from_user.id)); return

    ai_text = ai_estimate_kbju_from_image(file_url)
    if ai_text:
        bot.reply_to(m, f"üß† {ai_text}", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≥—Ä–∞–º–º—ã: ¬´–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; ...¬ª",
                     reply_markup=main_menu(m.from_user.id))

# ====== –†–ï–¶–ï–ü–¢–´ ======
@bot.message_handler(func=lambda m: m.text == "üç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò")
def recipes_entry(m):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üîç –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"), KeyboardButton("üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ N –∫–∫–∞–ª"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    USER_FLOW[m.from_user.id] = {"step":"recipes_menu"}
    bot.reply_to(m, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb)

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipes_menu")
def recipes_menu_handler(m):
    if m.text == "üîç –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É":
        USER_FLOW[m.from_user.id] = {"step":"recipe_query"}
        bot.reply_to(m, "–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å: ¬´–±–ª–∏–Ω—á–∏–∫–∏ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞¬ª, ¬´–ø–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π¬ª‚Ä¶", reply_markup=back_keyboard())
    elif m.text == "üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ N –∫–∫–∞–ª":
        USER_FLOW[m.from_user.id] = {"step":"recipe_kcal"}
        bot.reply_to(m, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω—É–∂–µ–Ω —Ä–µ—Ü–µ–ø—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä 600", reply_markup=back_keyboard())
    elif m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None)
        bot.reply_to(m, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipe_query")
def recipe_query_step(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None); bot.reply_to(m, "–û–∫–µ–π.", reply_markup=main_menu(m.from_user.id)); return
    ans = ai_recipe_suggestion(query=m.text.strip())
    bot.reply_to(m, ans, reply_markup=main_menu(m.from_user.id))
    USER_FLOW.pop(m.from_user.id, None)

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="recipe_kcal")
def recipe_kcal_step(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None); bot.reply_to(m, "–û–∫–µ–π.", reply_markup=main_menu(m.from_user.id)); return
    try:
        n = int(float(m.text.strip()))
        ans = ai_recipe_suggestion(target_kcal=n)
        bot.reply_to(m, ans, reply_markup=main_menu(m.from_user.id))
        USER_FLOW.pop(m.from_user.id, None)
    except:
        bot.reply_to(m, "–í–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 600.", reply_markup=back_keyboard())

# ====== –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ (–∞–Ω–∫–µ—Ç–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º–∞) ======
@bot.message_handler(func=lambda m: m.text == "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
def weekly_menu_entry(m):
    USER_FLOW[m.from_user.id] = {"step":"wq_height"}
    bot.reply_to(m, "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:", reply_markup=back_keyboard())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="wq_height")
def wq_height(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None); bot.reply_to(m,"–û–∫–µ–π.", reply_markup=main_menu(m.from_user.id)); return
    try:
        h = int(float(m.text.strip()))
        USER_FLOW[m.from_user.id] = {"step":"wq_weight", "height":h}
        bot.reply_to(m, "–í–µ—Å (–∫–≥):", reply_markup=back_keyboard())
    except:
        bot.reply_to(m, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Å–º.", reply_markup=back_keyboard())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="wq_weight")
def wq_weight(m):
    try:
        w = int(float(m.text.strip()))
        s = USER_FLOW[m.from_user.id]; s["weight"]=w; s["step"]="wq_goal"
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row(KeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"), KeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"))
        kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        bot.reply_to(m, "–¶–µ–ª—å?", reply_markup=kb)
    except:
        bot.reply_to(m, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –∫–≥.", reply_markup=back_keyboard())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="wq_goal")
def wq_goal(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        USER_FLOW.pop(m.from_user.id, None); bot.reply_to(m,"–û–∫–µ–π.", reply_markup=main_menu(m.from_user.id)); return
    goal = m.text.strip().lower()
    s = USER_FLOW.get(m.from_user.id, {})
    s["goal"]=goal

    if not has_premium(m.from_user.id):
        price = get_current_price()
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {price} ‚≠ê", callback_data="buy_premium_stars")
        )
        bot.send_message(m.chat.id, "üîí –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º. –ê–¥–º–∏–Ω–∞–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.",
                         reply_markup=kb)
        USER_FLOW.pop(m.from_user.id, None)
        return

    # –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    h, w = s.get("height"), s.get("weight")
    plan = (f"üìÖ –ú–µ–Ω—é (—á–µ—Ä–Ω–æ–≤–∏–∫): —Ü–µ–ª—å ‚Äî {goal}\n"
            f"- –î–µ–Ω—å 1: –æ–≤—Å—è–Ω–∫–∞, –∫—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º, —Ç–≤–æ—Ä–æ–≥\n"
            f"- –î–µ–Ω—å 2: —è–π—Ü–∞, –≥—Ä–µ—á–∫–∞ —Å –∏–Ω–¥–µ–π–∫–æ–π, —Å–∞–ª–∞—Ç\n"
            f"- –î–µ–Ω—å 3: —Å—ã—Ä–Ω–∏–∫–∏, –ø–∞—Å—Ç–∞ —Å —Ç—É–Ω—Ü–æ–º, –∫–µ—Ñ–∏—Ä\n"
            f"(—Ä–æ—Å—Ç {h} —Å–º, –≤–µ—Å {w} –∫–≥)")
    bot.reply_to(m, plan, reply_markup=main_menu(m.from_user.id))
    USER_FLOW.pop(m.from_user.id, None)
    # ====== –û–ü–õ–ê–¢–ê TELEGRAM STARS ======
@bot.callback_query_handler(func=lambda c: c.data == "buy_premium_stars")
def cb_buy_premium_stars(c):
    price_now = get_current_price()
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=price_now)]  # amount=–∑–≤—ë–∑–¥—ã
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",   # Stars ‚Äî –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        currency="XTR",
        prices=prices,
        is_flexible=False
    )
    bot.answer_callback_query(c.id)

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try:
        bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e:
        print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp = m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id, total, payload)
            db = _load(); u = db.get(str(m.from_user.id), {})
            exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
            bot.send_message(m.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.",
                             reply_markup=main_menu(m.from_user.id))
        else:
            if total: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ====== –ê–î–ú–ò–ù–ö–ê ======
@bot.message_handler(func=lambda m: m.text in ("üõ† –ê–¥–º–∏–Ω–∫–∞", "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=main_menu(m.from_user.id)); return
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
        InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums")
    )
    kb.row(
        InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm_broadcast"),
        InlineKeyboardButton("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="adm_welcome")
    )
    kb.row(
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–≥)", callback_data="adm_income"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data="adm_price")
    )
    bot.send_message(m.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    if not is_admin(c.from_user.id):
        bot.answer_callback_query(c.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    db = _load()
    if c.data == "adm_users":
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len([k for k in db if k!='__payments__'])}</b>")
    elif c.data == "adm_premiums":
        now = int(time.time())
        active = sum(1 for u in db.values() if isinstance(u, dict) and u.get("premium") and u.get("premium_until",0)>now)
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif c.data == "adm_income":
        pays = db.get("__payments__", [])
        total = sum(p.get("stars",0) for p in pays)
        bot.send_message(c.message.chat.id, f"üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: <b>{total} ‚≠ê</b> ({len(pays)} –æ–ø–ª–∞—Ç)")
    elif c.data == "adm_price":
        bot.send_message(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ:", parse_mode=None)
        USER_FLOW[c.from_user.id] = {"step":"adm_price"}
    elif c.data == "adm_broadcast":
        bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode=None)
        USER_FLOW[c.from_user.id] = {"step":"adm_bc"}
    elif c.data == "adm_welcome":
        bot.send_message(c.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ /start):", parse_mode=None)
        USER_FLOW[c.from_user.id] = {"step":"adm_welcome"}

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="adm_price")
def admin_price_step(m):
    if not is_admin(m.from_user.id): return
    try:
        new_price = int(m.text.strip())
        os.environ["STAR_PRICE_PREMIUM"] = str(new_price)
        bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
    finally:
        USER_FLOW.pop(m.from_user.id, None)

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="adm_bc")
def admin_bc_step(m):
    if not is_admin(m.from_user.id): return
    msg = m.text
    db = _load()
    ok=0; fail=0
    for k,v in list(db.items()):
        if k == "__payments__": continue
        try:
            uid = int(k)
            bot.send_message(uid, msg)
            ok+=1
        except:
            fail+=1
            continue
    bot.reply_to(m, f"üì£ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}", reply_markup=main_menu(m.from_user.id))
    USER_FLOW.pop(m.from_user.id, None)

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id,{}).get("step")=="adm_welcome")
def admin_welcome_step(m):
    if not is_admin(m.from_user.id): return
    global WELCOME_TEXT
    WELCOME_TEXT = m.text.strip()
    bot.reply_to(m, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu(m.from_user.id))
    USER_FLOW.pop(m.from_user.id, None)

# ====== –ú–ò–ù–ò-–í–ï–ë (Render –ø–∏–Ω–≥) ======
try:
    import flask
    app = flask.Flask(__name__)

    @app.route('/')
    def index():
        return "Bot is running!"

    def run_web():
        port = int(os.getenv("PORT", 10000))
        app.run(host="0.0.0.0", port=port)
    threading.Thread(target=run_web, daemon=True).start()
except Exception:
    pass

# ====== –ê–í–¢–û-–ü–ï–†–ï–ó–ê–ü–£–°–ö –†–ê–ó –í –°–£–¢–ö–ò ======
def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)

threading.Thread(target=auto_restart, daemon=True).start()

# ====== –ó–ê–ü–£–°–ö –ü–û–õ–õ–ò–ù–ì–ê ======
print("‚úÖ Bot started")
while True:
    try:
        bot.infinity_polling(skip_pending=True, timeout=90, long_polling_timeout=90)
    except KeyboardInterrupt:
        break
    except Exception as e:
        print("polling error:", e)
        time.sleep(3)
