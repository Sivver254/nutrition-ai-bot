# -*- coding: utf-8 -*-
# bot.py ‚Äî Calories/KBJU bot with Stars-premium + admin, trial and web ping

import os, json, time, datetime, threading
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ====== –ö–û–ù–§–ò–ì ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))  # ‚≠ê
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))

def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try: ids.add(int(os.getenv("ADMIN_ID")))
        except: pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit(): ids.add(int(x))
    if not ids:
        ids.add(123456789)  # –∑–∞–º–µ–Ω–∏ –∏–ª–∏ –∑–∞–¥–∞–π ADMIN_ID
    return ids
ADMIN_IDS = _parse_admins()
def is_admin(uid: int) -> bool: return uid in ADMIN_IDS

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---- –ê–Ω—Ç–∏-409 + —á–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç ----
try:
    bot.delete_webhook(drop_pending_updates=True)
except Exception as e:
    print("delete_webhook error:", e)

# –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
try:
    import fcntl
    _lockfile = open("bot.lock", "w")
    fcntl.flock(_lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
except Exception:
    print("Another instance is already running. Exit.")
    import sys; sys.exit(0)

DATA_FILE = "users.json"
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save(db): 
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db, uid:int):
    s = str(uid)
    if s not in db:
        db[s] = {"joined": int(time.time()), "premium": False, "premium_until": 0, "trial_started": 0}
    return db[s]

def set_premium(uid:int, days:int):
    db = _load()
    u = get_user(db, uid)
    now = int(time.time())
    base = u["premium_until"] if u["premium_until"] > now else now
    u["premium_until"] = base + days * 86400
    u["premium"] = True
    db[str(uid)] = u
    _save(db)

def has_premium(uid:int) -> bool:
    db = _load(); u = db.get(str(uid))
    if not u: return False
    if u["premium"] and u["premium_until"] > int(time.time()):
        return True
    if u["premium"] and u["premium_until"] <= int(time.time()):
        u["premium"] = False; _save(db)
    return False

def log_payment(uid:int, stars:int, payload:str):
    db = _load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

def get_current_price() -> int:
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

# ====== –°–æ—Å—Ç–æ—è–Ω–∏—è ======
USER_FLOW = {}   # { uid: {"step": "...", ...} }

def set_step(uid, step): USER_FLOW[uid] = {"step": step}
def get_step(uid): return USER_FLOW.get(uid, {}).get("step")
def reset_flow(uid): USER_FLOW.pop(uid, None)

# ====== –û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu(uid:int=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
    kb.row(KeyboardButton("üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"), KeyboardButton("üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"))
    kb.row(KeyboardButton("üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"))
    kb.row(KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    if uid and is_admin(uid):
        kb.row(KeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"))
    return kb

SERVICE_BUTTONS = {
    "üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É", "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ", "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –í –º–µ–Ω—é",
    "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º", "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"
}

# ====== –¢—Ä–∏–∞–ª 24 —á–∞—Å–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–∏—á ======
TRIAL_HOURS = 24
def trial_active(uid:int)->bool:
    db = _load(); u = get_user(db, uid)
    started = u.get("trial_started", 0)
    if not started:
        u["trial_started"] = int(time.time()); _save(db)
        return True
    return (int(time.time()) - started) <= TRIAL_HOURS*3600
    # ====== –°—Ç–∞—Ä—Ç/–ø–æ–º–æ—â—å ======
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db = _load(); get_user(db, m.from_user.id); _save(db)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –µ–¥—ã:\n"
        "‚Ä¢ ¬´üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ¬ª ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n"
        "‚Ä¢ ¬´üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É¬ª ‚Äî –Ω–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥—Ä–∞–º–º—ã\n\n"
        "–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å <b>–º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π</b> –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî ¬´üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª.\n"
        "–ê –µ—â—ë ‚Äî ¬´üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò¬ª (–≤ —Ç.—á. ¬´–Ω–∞ –∫–∞–ª–æ—Ä–∏–∏¬ª).\n\n"
        "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π.",
        reply_markup=main_menu(m.from_user.id)
    )

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def check_premium(m):
    if has_premium(m.from_user.id):
        db = _load(); u = db.get(str(m.from_user.id), {})
        exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def buy_premium(m):
    price = get_current_price()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars"))
    bot.send_message(m.chat.id,
        f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n–¶–µ–Ω–∞: {price} ‚≠ê",
        reply_markup=kb
    )

# ====== –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò ======
def recipes_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üç≥ –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"))
    kb.row(KeyboardButton("üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ –∫–∞–ª–æ—Ä–∏–∏"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@bot.message_handler(func=lambda m: m.text=="üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò")
def recipes_root(m):
    reset_flow(m.from_user.id)
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=recipes_menu())

@bot.message_handler(func=lambda m: m.text=="üç≥ –†–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É")
def recipe_free_text(m):
    set_step(m.from_user.id, "recipe_free")
    bot.send_message(m.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å? –û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫—É—Ö–Ω—è –∏ —Ç.–ø.).")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="recipe_free", content_types=['text'])
def recipe_free_go(m):
    q = m.text.strip()
    # –∑–¥–µ—Å—å –º–æ–∂–µ—à—å –¥–µ—Ä–≥–∞—Ç—å —Å–≤–æ–π –ò–ò ‚Äî —è –¥–∞—é –∑–∞–≥–ª—É—à–∫—É
    text = f"–ò–¥–µ—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª:\n- –®–∞–≥ 1 ...\n- –®–∞–≥ 2 ...\n–ö–ë–ñ–£ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ: 520 –∫–∫–∞–ª, –ë/–ñ/–£ 28/22/46"
    bot.send_message(m.chat.id, text, reply_markup=recipes_menu())
    reset_flow(m.from_user.id)

@bot.message_handler(func=lambda m: m.text=="üî• –†–µ—Ü–µ–ø—Ç –Ω–∞ –∫–∞–ª–æ—Ä–∏–∏")
def recipe_kcal_start(m):
    set_step(m.from_user.id, "recipe_kcal")
    bot.send_message(m.chat.id, "–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω—É–∂–Ω–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 600)")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="recipe_kcal", content_types=['text'])
def recipe_kcal_go(m):
    try:
        kcal = int(m.text.strip())
        # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        text = (f"–ü—Ä–∏–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ ~{kcal} –∫–∫–∞–ª:\n"
                f"- –û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏ –∏ —Ç–æ—Å—Ç–æ–º\n- –ô–æ–≥—É—Ä—Ç –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n\n"
                f"–ö–ë–ñ–£ ~{kcal} –∫–∫–∞–ª, –ë/–ñ/–£ ‚âà 35/20/45")
        bot.send_message(m.chat.id, text, reply_markup=recipes_menu())
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=recipes_menu())
    finally:
        reset_flow(m.from_user.id)

# ====== –ù–∞–∑–∞–¥ ======
@bot.message_handler(func=lambda m: m.text in ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –í –º–µ–Ω—é"))
def go_back(m):
    reset_flow(m.from_user.id)
    bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu(m.from_user.id))

# ====== –ê–¥–º–∏–Ω–∫–∞ ======
@bot.message_handler(func=lambda m: m.text in ("üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞", "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu(m.from_user.id))
        return
    kb = InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
           InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums"))
    kb.row(InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_grant"),
           InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_revoke"))
    kb.row(InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–≥)", callback_data="adm_income"),
           InlineKeyboardButton("üíµ –ò–∑–º. —Ü–µ–Ω—É (–∑–≤—ë–∑–¥—ã)", callback_data="adm_price"))
    bot.send_message(m.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    if not is_admin(c.from_user.id):
        bot.answer_callback_query(c.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    db = _load()
    if c.data == "adm_users":
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len([k for k in db.keys() if k!='__payments__'])}</b>")
    elif c.data == "adm_premiums":
        now = int(time.time())
        active = sum(1 for u in db.values() if isinstance(u, dict) and u.get("premium") and u.get("premium_until",0) > now)
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif c.data == "adm_income":
        pays = db.get("__payments__", [])
        total = sum(p.get("stars", 0) for p in pays)
        cnt = len(pays)
        bot.send_message(c.message.chat.id, f"üí∞ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: <b>{total} ‚≠ê</b> ({cnt} –æ–ø–ª–∞—Ç)")
    elif c.data == "adm_grant":
        set_step(c.from_user.id, "adm_grant")
        bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id> [–¥–Ω–∏]` (–±–µ–∑ —Å–∫–æ–±–æ–∫).", parse_mode=None)
    elif c.data == "adm_revoke":
        set_step(c.from_user.id, "adm_revoke")
        bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id>` –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–º–∏—É–º–∞.", parse_mode=None)
    elif c.data == "adm_price":
        set_step(c.from_user.id, "adm_price")
        bot.send_message(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 150):", parse_mode=None)

@bot.message_handler(func=lambda m: get_step(m.from_user.id) in ("adm_grant","adm_revoke","adm_price"), content_types=['text'])
def admin_next_steps(m):
    step = get_step(m.from_user.id)
    try:
        if step == "adm_grant":
            parts = m.text.strip().split()
            uid = int(parts[0]); days = int(parts[1]) if len(parts) > 1 else PREMIUM_DAYS
            set_premium(uid, days)
            bot.reply_to(m, f"‚úÖ –í—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> –Ω–∞ {days} –¥–Ω.",
                         reply_markup=main_menu(m.from_user.id))
            try: bot.send_message(uid, f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except: pass
        elif step == "adm_revoke":
            uid = int(m.text.strip())
            db = _load(); u = db.get(str(uid))
            if not u: raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            u["premium"] = False; u["premium_until"] = 0
            db[str(uid)] = u; _save(db)
            bot.reply_to(m, f"‚úÖ –°–Ω—è—Ç –ø—Ä–µ–º–∏—É–º —É <code>{uid}</code>.", reply_markup=main_menu(m.from_user.id))
            try: bot.send_message(uid, "‚ùå –í–∞—à –ø—Ä–µ–º–∏—É–º –±—ã–ª —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except: pass
        elif step == "adm_price":
            new_price = int(m.text.strip())
            os.environ["STAR_PRICE_PREMIUM"] = str(new_price)
            bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_price} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
    finally:
        reset_flow(m.from_user.id)
        # ====== –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É ======
def parse_items(text:str):
    """
    –§–æ—Ä–º–∞—Ç: '–ö—É—Ä–∏—Ü–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{"name":..., "gram":...}, ...]
    """
    items = []
    for part in text.split(";"):
        part = part.strip()
        if not part: continue
        # –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –≥—Ä–∞–º–º—ã –≤ –∫–æ–Ω—Ü–µ
        gram = None
        for token in (" –≥", " –≥—Ä", " –≥—Ä–∞–º–º", " –≥—Ä–∞–º–º–æ–≤"):
            if part.lower().endswith(token):
                # –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
                nums = [s for s in part.split() if s.isdigit()]
                if nums: gram = int(nums[-1])
                name = part[: -len(token)].strip()
                break
        if gram is None:
            # –±–µ–∑ –µ–¥–∏–Ω–∏—Ü: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ ‚Äî –≥—Ä–∞–º–º—ã
            tokens = part.split()
            if tokens and tokens[-1].isdigit():
                gram = int(tokens[-1]); name = " ".join(tokens[:-1])
            else:
                # –Ω–µ –ø—Ä–æ–¥—É–∫—Ç ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–ª—É–∂–µ–±–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                raise ValueError(f"–ù–µ –ø–æ–Ω—è–ª –ø–æ–∑–∏—Ü–∏—é: ¬´{part}¬ª")
        items.append({"name": name, "gram": gram})
    return items

def kbju_stub(items):
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞/–ë–î/–ò–ò
    # –≤–µ—Ä–Ω–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
    kcal = sum(int(it["gram"]*1.2) for it in items)
    p = sum(int(it["gram"]*0.15/10) for it in items)
    f = sum(int(it["gram"]*0.08/10) for it in items)
    c = sum(int(it["gram"]*0.2/10) for it in items)
    return kcal, p, f, c

@bot.message_handler(func=lambda m: m.text=="üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É")
def kbju_list_start(m):
    reset_flow(m.from_user.id)
    set_step(m.from_user.id, "kbju_list")
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ü—Ä–æ–¥—É–∫—Ç 120 –≥; ...¬ª. –ü—Ä–∏–º–µ—Ä:\n"
                                "–ö—É—Ä. –≥—Ä—É–¥–∫–∞ 150 –≥; –†–∏—Å 180 –≥; –°–∞–ª–∞—Ç 120 –≥")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="kbju_list", content_types=['text'])
def kbju_list_calc(m):
    try:
        items = parse_items(m.text)
        kcal, p, f, c = kbju_stub(items)
        lines = [f"‚Ä¢ {it['name']} ‚Äî {it['gram']} –≥" for it in items]
        ans = "–í–∞—à —Å–ø–∏—Å–æ–∫:\n" + "\n".join(lines) + f"\n\n–ò—Ç–æ–≥–æ: {kcal} –∫–∫–∞–ª ‚Äî –ë/–ñ/–£ {p}/{f}/{c}"
        bot.send_message(m.chat.id, ans, reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(m.from_user.id))
    finally:
        reset_flow(m.from_user.id)

# ====== –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ ======
@bot.message_handler(func=lambda m: m.text=="üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ")
def kbju_photo_hint(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º. –í –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –Ω–∞ 24 —á–∞—Å–∞ (–ø—Ä–æ–±–Ω—ã–π).")

@bot.message_handler(content_types=['photo'])
def kbju_photo(m):
    uid = m.from_user.id
    if not (has_premium(uid) or trial_active(uid)):
        bot.reply_to(m, "üîí –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Å –ø—Ä–µ–º–∏—É–º–æ–º.\n–ù–∞–∂–º–∏ ¬´‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º¬ª.",
                     reply_markup=main_menu(uid))
        return
    # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å —Å–≤–æ—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Äî —è –≤–æ–∑–≤—Ä–∞—â–∞—é –∑–∞–≥–ª—É—à–∫—É
    bot.reply_to(m, "üß† –†–∞—Å–ø–æ–∑–Ω–∞–ª –±–ª—é–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ—Ü–µ–Ω–∏–ª –ö–ë–ñ–£ (–ø—Ä–∏–º–µ—Ä): ~520 –∫–∫–∞–ª, –ë/–ñ/–£ 32/18/50",
                 reply_markup=main_menu(uid))

# ====== –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–∞–Ω–∫–µ—Ç–∞) ======
def questionnaire_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    kb.row(KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))
    kb.row(KeyboardButton("–¶–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ"), KeyboardButton("–¶–µ–ª—å: –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"), KeyboardButton("–¶–µ–ª—å: –Ω–∞–±–æ—Ä"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

@bot.message_handler(func=lambda m: m.text=="üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
def week_menu_start(m):
    reset_flow(m.from_user.id)
    set_step(m.from_user.id, "menu_gender")
    bot.send_message(m.chat.id, "–ù–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É. –£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=questionnaire_kb())

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="menu_gender")
def week_menu_gender(m):
    g = m.text.strip().lower()
    if g not in ("–º—É–∂—á–∏–Ω–∞","–∂–µ–Ω—â–∏–Ω–∞"):
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ¬´–ú—É–∂—á–∏–Ω–∞¬ª –∏–ª–∏ ¬´–ñ–µ–Ω—â–∏–Ω–∞¬ª.", reply_markup=questionnaire_kb()); return
    USER_FLOW[m.from_user.id]["gender"] = g
    set_step(m.from_user.id, "menu_ht")
    bot.send_message(m.chat.id, "–†–æ—Å—Ç (—Å–º):")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="menu_ht")
def week_menu_ht(m):
    try:
        h = int(m.text.strip()); USER_FLOW[m.from_user.id]["height"] = h
        set_step(m.from_user.id, "menu_wt"); bot.send_message(m.chat.id, "–í–µ—Å (–∫–≥):")
    except: bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="menu_wt")
def week_menu_wt(m):
    try:
        w = int(m.text.strip()); USER_FLOW[m.from_user.id]["weight"] = w
        set_step(m.from_user.id, "menu_goal"); bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å (–∫–Ω–æ–ø–∫–∞ –≤—ã—à–µ).")
    except: bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –∫–≥.")

@bot.message_handler(func=lambda m: get_step(m.from_user.id)=="menu_goal")
def week_menu_goal(m):
    goal = m.text.strip().lower()
    if goal not in ("—Ü–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ","—Ü–µ–ª—å: –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ","—Ü–µ–ª—å: –Ω–∞–±–æ—Ä"):
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π.", reply_markup=questionnaire_kb()); return
    USER_FLOW[m.from_user.id]["goal"] = goal

    # –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º
    if not has_premium(m.from_user.id):
        price = get_current_price()
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞ {price} ‚≠ê", callback_data="buy_premium_stars"))
        bot.send_message(m.chat.id,
            "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º–æ–º.",
            reply_markup=kb)
    else:
        bot.send_message(m.chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)",
                         reply_markup=main_menu(m.from_user.id))
    reset_flow(m.from_user.id)
    # ====== –û–ü–õ–ê–¢–ê TELEGRAM STARS (XTR) ======
@bot.callback_query_handler(func=lambda c: c.data == "buy_premium_stars")
def cb_buy_premium_stars(c):
    price_now = get_current_price()
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=price_now)]
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",        # Stars –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω–∞
        currency="XTR",           # –≤–∞–∂–Ω–æ: XTR
        prices=prices,
        is_flexible=False
    )
    bot.answer_callback_query(c.id)

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try:
        bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e:
        print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp = m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total is not None: log_payment(m.from_user.id, total, payload)
            db = _load(); u = db.get(str(m.from_user.id), {})
            exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
            bot.send_message(m.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.",
                             reply_markup=main_menu(m.from_user.id))
        else:
            if total is not None: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ====== –ú–∏–Ω–∏-–≤–µ–± –¥–ª—è Render (–ø–æ—Ä—Ç-–±–∏–Ω–¥–∏–Ω–≥/–ø–∏–Ω–≥) ======
try:
    import flask, threading as _th
    app = flask.Flask(__name__)
    @app.route('/')
    def index(): return "Bot is running!"
    def run_web():
        port = int(os.getenv("PORT", 10000))
        app.run(host="0.0.0.0", port=port)
    _th.Thread(target=run_web, daemon=True).start()
except Exception:
    pass  # –Ω–∞ worker –Ω–µ –Ω—É–∂–µ–Ω

# ====== –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ======
def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)
threading.Thread(target=auto_restart, daemon=True).start()

# ====== –ó–ê–ü–£–°–ö ======
print("‚úÖ Bot started")
while True:
    try:
        bot.infinity_polling(skip_pending=True, timeout=90, long_polling_timeout=90)
    except KeyboardInterrupt:
        break
    except Exception as e:
        print("polling error:", e)
        time.sleep(3)
