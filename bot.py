# bot.py ‚Äî Telegram Stars premium + admin-only panel
import os, json, time, datetime, threading
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)

# ====== –ö–û–ù–§–ò–ì ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set (Render ‚Üí Settings ‚Üí Environment)")

# —Ü–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
STAR_PRICE_PREMIUM_DEFAULT = int(os.getenv("STAR_PRICE_PREMIUM", "100"))  # 100‚≠ê –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PREMIUM_DAYS = int(os.getenv("PREMIUM_DAYS", "30"))  # 30 –¥–Ω–µ–π

# --- —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –≤–∏–¥—è—Ç/–º–æ–≥—É—Ç –∞–¥–º–∏–Ω–∫—É) ---
def _parse_admins():
    ids = set()
    if os.getenv("ADMIN_ID"):
        try: ids.add(int(os.getenv("ADMIN_ID")))
        except: pass
    if os.getenv("ADMIN_IDS"):
        for x in os.getenv("ADMIN_IDS").split(","):
            x = x.strip()
            if x.isdigit(): ids.add(int(x))
    if not ids:
        ids.add(123456789)  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –∏–ª–∏ –∑–∞–¥–∞–π ADMIN_ID –Ω–∞ Render
    return ids
ADMIN_IDS = _parse_admins()
def is_admin(user_id:int) -> bool:
    return user_id in ADMIN_IDS

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"   # –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î (Render —Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª –º–µ–∂–¥—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏)
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
# {
#   "<uid>": {"joined":ts,"premium":bool,"premium_until":ts},
#   "__payments__":[{"uid":..., "stars":int, "ts":ts, "payload":str}]
# }

# ====== –ë–î ======
def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save(db):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db, uid:int):
    s = str(uid)
    if s not in db:
        db[s] = {"joined": int(time.time()), "premium": False, "premium_until": 0}
    return db[s]

def set_premium(uid:int, days:int):
    db = _load()
    u = get_user(db, uid)
    now = int(time.time())
    base = u["premium_until"] if u["premium_until"] > now else now
    u["premium_until"] = base + days * 86400
    u["premium"] = True
    db[str(uid)] = u
    _save(db)

def has_premium(uid:int) -> bool:
    db = _load(); u = db.get(str(uid))
    if not u: return False
    if u["premium"] and u["premium_until"] > int(time.time()):
        return True
    # –∞–≤—Ç–æ-—Å–±—Ä–æ—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ
    if u["premium"] and u["premium_until"] <= int(time.time()):
        u["premium"] = False
        db[str(uid)] = u
        _save(db)
    return False

def log_payment(uid:int, stars:int, payload:str):
    db = _load()
    db.setdefault("__payments__", []).append({
        "uid": uid, "stars": int(stars), "ts": int(time.time()), "payload": payload
    })
    _save(db)

def get_current_price() -> int:
    # —á–∏—Ç–∞–µ–º ¬´–∂–∏–≤—É—é¬ª —Ü–µ–Ω—É –∏–∑ ENV (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    try: return int(os.getenv("STAR_PRICE_PREMIUM", str(STAR_PRICE_PREMIUM_DEFAULT)))
    except: return STAR_PRICE_PREMIUM_DEFAULT

# ====== –ú–ï–ù–Æ ======
def main_menu(user_id:int=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
    kb.row(KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–µ–º–∏—É–º)")
    if user_id and is_admin(user_id):
        kb.row(KeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞"))
    return kb
# ====== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ======
@bot.message_handler(commands=["start"])
def cmd_start(m):
    db = _load(); get_user(db, m.from_user.id); _save(db)
    print(f"/start from {m.from_user.id} @{m.from_user.username}")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ\n–Ø –ø—Ä–∏–Ω–∏–º–∞—é –æ–ø–ª–∞—Ç—É –≤ Telegram Stars (XTR).\n"
        "–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π.\n\nüëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(m.from_user.id)
    )

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def check_premium(m):
    if has_premium(m.from_user.id):
        db = _load(); u = db.get(str(m.from_user.id), {})
        exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
        bot.reply_to(m, f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.", reply_markup=main_menu(m.from_user.id))
    else:
        bot.reply_to(m, "‚ùå –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu(m.from_user.id))

@bot.message_handler(func=lambda m: m.text == "‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º")
def buy_premium(m):
    price = get_current_price()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠ê", callback_data="buy_premium_stars"))
    bot.send_message(m.chat.id,
        f"–ü—Ä–µ–º–∏—É–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n"
        f"–¶–µ–Ω–∞: {price} ‚≠ê",
        reply_markup=kb
    )

# –ø—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–π —Ñ–∏—á–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ –ø—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω)
@bot.message_handler(func=lambda m: m.text == "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–ø—Ä–µ–º–∏—É–º)"])
def week_menu_feature(m):
    if not has_premium(m.from_user.id):
        bot.reply_to(m, "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º–æ–º. –ù–∞–∂–º–∏ ¬´‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º¬ª.",
                     reply_markup=main_menu(m.from_user.id))
        return
    bot.reply_to(m, "üß† –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (–¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç).",
                 reply_markup=main_menu(m.from_user.id))

# ====== –ê–î–ú–ò–ù–ö–ê (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ) ======
@bot.message_handler(func=lambda m: m.text in ("üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞", "/admin"))
def admin_panel(m):
    if not is_admin(m.from_user.id):
        bot.reply_to(m, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu(m.from_user.id))
        return
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_users"),
        InlineKeyboardButton("üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–º–∏—É–º—ã", callback_data="adm_premiums")
    )
    kb.row(
        InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_grant"),
        InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º (ID)", callback_data="adm_revoke")
    )
    kb.row(
        InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥)", callback_data="adm_income"),
        InlineKeyboardButton("üíµ –ò–∑–º. —Ü–µ–Ω—É (–∑–≤—ë–∑–¥—ã)", callback_data="adm_price")
    )
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_"))
def admin_actions(c):
    if not is_admin(c.from_user.id):
        bot.answer_callback_query(c.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    db = _load()
    if c.data == "adm_users":
        bot.send_message(c.message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len([k for k in db.keys() if k!='__payments__'])}</b>")
    elif c.data == "adm_premiums":
        now = int(time.time())
        active = sum(1 for u in db.values() if isinstance(u, dict) and u.get("premium") and u.get("premium_until",0) > now)
        bot.send_message(c.message.chat.id, f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: <b>{active}</b>")
    elif c.data == "adm_income":
        pays = db.get("__payments__", [])
        total = sum(p["stars"] for p in pays)
        cnt = len(pays)
        bot.send_message(c.message.chat.id, f"üí∞ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: <b>{total} ‚≠ê</b> ({cnt} –æ–ø–ª–∞—Ç)")
    elif c.data == "adm_grant":
        bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id> [–¥–Ω–∏]` (–±–µ–∑ —Å–∫–æ–±–æ–∫).", parse_mode=None)
        bot.register_next_step_handler(c.message, admin_grant_step)
    elif c.data == "adm_revoke":
        bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å: `<user_id>` –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–º–∏—É–º–∞.", parse_mode=None)
        bot.register_next_step_handler(c.message, admin_revoke_step)
    elif c.data == "adm_price":
        bot.send_message(c.message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {get_current_price()} ‚≠ê\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 150):", parse_mode=None)
        bot.register_next_step_handler(c.message, admin_price_step)

def admin_grant_step(m):
    if not is_admin(m.from_user.id): return
    try:
        parts = m.text.strip().split()
        uid = int(parts[0])
        days = int(parts[1]) if len(parts) > 1 else PREMIUM_DAYS
        set_premium(uid, days)
        bot.reply_to(m, f"‚úÖ –í—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> –Ω–∞ {days} –¥–Ω.",
                     reply_markup=main_menu(m.from_user.id))
        try: bot.send_message(uid, f"‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except: pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_revoke_step(m):
    if not is_admin(m.from_user.id): return
    try:
        uid = int(m.text.strip())
        db = _load(); u = db.get(str(uid))
        if not u: raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        u["premium"] = False; u["premium_until"] = 0
        db[str(uid)] = u; _save(db)
        bot.reply_to(m, f"‚úÖ –°–Ω—è—Ç –ø—Ä–µ–º–∏—É–º —É <code>{uid}</code>.", reply_markup=main_menu(m.from_user.id))
        try: bot.send_message(uid, "‚ùå –í–∞—à –ø—Ä–µ–º–∏—É–º –±—ã–ª —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except: pass
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))

def admin_price_step(m):
    if not is_admin(m.from_user.id): return
    try:
        new_price = int(m.text.strip())
        os.environ["STAR_PRICE_PREMIUM"] = str(new_price)  # –æ–±–Ω–æ–≤–∏–º ¬´–Ω–∞ –ª–µ—Ç—É¬ª
        bot.reply_to(m, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_price} ‚≠ê", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=main_menu(m.from_user.id))
# ====== –û–ü–õ–ê–¢–ê TELEGRAM STARS (XTR) ======
@bot.callback_query_handler(func=lambda c: c.data == "buy_premium_stars")
def cb_buy_premium_stars(c):
    price_now = get_current_price()
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π", amount=price_now)]  # amount = –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    bot.send_invoice(
        chat_id=c.message.chat.id,
        title="–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
        description=f"–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ {PREMIUM_DAYS} –¥–Ω–µ–π.",
        invoice_payload=f"premium_stars:{c.from_user.id}",
        provider_token="",      # Stars –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω–∞
        currency="XTR",         # –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ: XTR = Telegram Stars
        prices=prices,
        is_flexible=False
    )
    bot.answer_callback_query(c.id)

@bot.pre_checkout_query_handler(func=lambda q: True)
def pre_checkout(q):
    try:
        bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception as e:
        print("pre_checkout error:", e)

@bot.message_handler(content_types=['successful_payment'])
def on_paid(m):
    try:
        sp = m.successful_payment
        payload = sp.invoice_payload or ""
        total = getattr(sp, "total_amount", None)  # –≤ Stars —á–∞—Å—Ç–æ —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É –∑–≤—ë–∑–¥
        if payload.startswith("premium_stars:"):
            set_premium(m.from_user.id, PREMIUM_DAYS)
            if total: log_payment(m.from_user.id, total, payload)
            db = _load(); u = db.get(str(m.from_user.id), {})
            exp = datetime.datetime.fromtimestamp(u.get("premium_until", 0)).strftime("%d.%m.%Y")
            bot.send_message(
                m.from_user.id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ <b>{exp}</b>.",
                reply_markup=main_menu(m.from_user.id)
            )
        else:
            if total: log_payment(m.from_user.id, total, payload)
            bot.send_message(m.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞.", reply_markup=main_menu(m.from_user.id))
    except Exception as e:
        bot.send_message(m.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu(m.from_user.id))

# ====== –ê–í–¢–û-–ü–ï–†–ï–ó–ê–ü–£–°–ö –†–ê–ó –í –°–£–¢–ö–ò (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏–π) ======
def auto_restart():
    while True:
        time.sleep(24*3600)
        os._exit(0)  # Render –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å

threading.Thread(target=auto_restart, daemon=True).start()

# ====== –ó–ê–ü–£–°–ö ======
print("‚úÖ Bot started")
while True:
    try:
        bot.infinity_polling(skip_pending=True, timeout=90)
    except KeyboardInterrupt:
        break
    except Exception as e:
        print("polling error:", e)
        time.sleep(3)
