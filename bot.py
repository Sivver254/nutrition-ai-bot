# === CONFIG / STATE ===
import os, json, time, datetime, threading, io
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
)
from PIL import Image

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN is not set")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "users.json"
USER_FLOW = {}   # state per user

def _load():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f: f.write("{}")
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def _save(db):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(uid:int):
    db = _load()
    s = str(uid)
    if s not in db:
        db[s] = {
            "joined": int(time.time()),
            "premium": False,
            "premium_until": 0,
            # –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–µ–Ω—é
            "profile": {
                "gender": None,     # "–ú—É–∂—á–∏–Ω–∞"|"–ñ–µ–Ω—â–∏–Ω–∞"
                "goal": None,       # "–ü–æ—Ö—É–¥–µ–Ω–∏–µ"|"–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"|"–ù–∞–±–æ—Ä"
                "height_cm": None,
                "weight_kg": None,
                "age": None,
                "activity": None,   # "–ù–∏–∑–∫–∞—è"/"–°—Ä–µ–¥–Ω—è—è"/"–í—ã—Å–æ–∫–∞—è"
            }
        }
        _save(db)
    return db[s]

def put_user(uid:int, data:dict):
    db = _load()
    db[str(uid)] = data
    _save(db)
    def main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ"), KeyboardButton("üßæ –ö–ë–ñ–£ –ø–æ —Å–ø–∏—Å–∫—É"))
    kb.row(KeyboardButton("üç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò"), KeyboardButton("üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    kb.row(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º"))
    kb.row(KeyboardButton("üõ† –ê–¥–º–∏–Ω–∫–∞"))
    return kb

def back_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def gender_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def goal_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"))
    kb.row(KeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

def activity_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("–ù–∏–∑–∫–∞—è"), KeyboardButton("–°—Ä–µ–¥–Ω—è—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è"))
    kb.row(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb
    @bot.message_handler(commands=["start"])
def cmd_start(m):
    get_user(m.from_user.id)  # ensure profile
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –∏ —Å–æ—Å—Ç–∞–≤–ª—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ–¥ —Ç–µ–±—è.\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_kb()
    )
    USER_FLOW.pop(m.from_user.id, None)

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(m):
    USER_FLOW.pop(m.from_user.id, None)
    bot.send_message(m.chat.id, "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_kb())
    @bot.message_handler(func=lambda m: m.text == "üì∏ –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ")
def kbju_photo_start(m):
    # —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    USER_FLOW[m.from_user.id] = {"step": "await_photo"}
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–†–∏—Å 150 –≥, –ö—É—Ä–∏—Ü–∞ 120 –≥¬ª).",
        reply_markup=back_kb()
    )

@bot.message_handler(content_types=['photo'])
def kbju_photo_receive(m):
    st = USER_FLOW.get(m.from_user.id, {})
    if st.get("step") != "await_photo":
        # –∏–≥–Ω–æ—Ä, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ
        return

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
    try:
        file_id = m.photo[-1].file_id
        file_info = bot.get_file(file_id)
        data = bot.download_file(file_info.file_path)
    except Exception as e:
        bot.reply_to(m, f"‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {e}", reply_markup=main_kb())
        USER_FLOW.pop(m.from_user.id, None)
        return

    # –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ ¬´–ø–æ–¥—Å–∫–∞–∑–∫–∞¬ª –¥–ª—è –ò–ò
    hint = (m.caption or "").strip()

    # –æ—Ü–µ–Ω–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –ò–ò (–∏–ª–∏ —Ñ–æ–ª–±—ç–∫)
    try:
        kbju_text = ai_estimate_kbju_from_image(data, hint)
    except Exception as e:
        kbju_text = None

    if not kbju_text:
        kbju_text = "üß† –†–∞—Å–ø–æ–∑–Ω–∞–ª –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ—Ü–µ–Ω–∏–ª –ö–ë–ñ–£ (–ø—Ä–∏–º–µ—Ä): ~520 –∫–∫–∞–ª, –ë/–ñ/–£ 32/18/50"

    bot.send_message(m.chat.id, kbju_text, reply_markup=main_kb())
    USER_FLOW.pop(m.from_user.id, None)
    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
def week_menu_start(m):
    u = get_user(m.from_user.id)
    USER_FLOW[m.from_user.id] = {"step": "ask_gender"}
    bot.send_message(
        m.chat.id,
        "–£–∫–∞–∂–∏ –ø–æ–ª:",
        reply_markup=gender_kb()
    )

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_gender")
def week_menu_gender(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    if m.text not in ("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"):
        return bot.reply_to(m, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", reply_markup=gender_kb())

    u = get_user(m.from_user.id)
    u["profile"]["gender"] = m.text
    put_user(m.from_user.id, u)

    USER_FLOW[m.from_user.id] = {"step": "ask_goal"}
    bot.send_message(m.chat.id, "–ö–∞–∫–∞—è —Ü–µ–ª—å?", reply_markup=goal_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_goal")
def week_menu_goal(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    if m.text not in ("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"):
        return bot.reply_to(m, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", reply_markup=goal_kb())

    u = get_user(m.from_user.id)
    u["profile"]["goal"] = m.text
    put_user(m.from_user.id, u)

    USER_FLOW[m.from_user.id] = {"step": "ask_height"}
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 178):", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_height")
def week_menu_height(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    try:
        h = int(m.text.strip())
        if not 120 <= h <= 230: raise ValueError
    except:
        return bot.reply_to(m, "–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 120 –¥–æ 230.", reply_markup=back_kb())

    u = get_user(m.from_user.id)
    u["profile"]["height_cm"] = h; put_user(m.from_user.id, u)

    USER_FLOW[m.from_user.id] = {"step": "ask_weight"}
    bot.send_message(m.chat.id, "–í–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 74):", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_weight")
def week_menu_weight(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    try:
        w = float(m.text.replace(",", "."))
        if not 35 <= w <= 250: raise ValueError
    except:
        return bot.reply_to(m, "–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 35 –¥–æ 250.", reply_markup=back_kb())

    u = get_user(m.from_user.id)
    u["profile"]["weight_kg"] = round(w, 1); put_user(m.from_user.id, u)

    USER_FLOW[m.from_user.id] = {"step": "ask_age"}
    bot.send_message(m.chat.id, "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=back_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_age")
def week_menu_age(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    try:
        a = int(m.text.strip())
        if not 10 <= a <= 90: raise ValueError
    except:
        return bot.reply_to(m, "–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 90.", reply_markup=back_kb())

    u = get_user(m.from_user.id)
    u["profile"]["age"] = a; put_user(m.from_user.id, u)

    USER_FLOW[m.from_user.id] = {"step": "ask_activity"}
    bot.send_message(m.chat.id, "–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=activity_kb())

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_activity")
def week_menu_activity(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    if m.text not in ("–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è"):
        return bot.reply_to(m, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", reply_markup=activity_kb())

    u = get_user(m.from_user.id)
    u["profile"]["activity"] = m.text; put_user(m.from_user.id, u)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ –ò–ò
    prof = u["profile"]
    try:
        plan = ai_generate_week_menu(prof, m.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    except Exception as e:
        plan = None

    if not plan:
        plan = "üß† –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n(–ø—Ä–∏–º–µ—Ä-—Ä—ã–±–∞: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω 3 –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ + –ø–µ—Ä–µ–∫—É—Å—ã, 1700‚Äì1900 –∫–∫–∞–ª/–¥–µ–Ω—å)"

    bot.send_message(m.chat.id, plan, reply_markup=main_kb())
    USER_FLOW.pop(m.from_user.id, None)
    @bot.message_handler(func=lambda m: m.text == "üç≥ –†–µ—Ü–µ–ø—Ç—ã –æ—Ç –ò–ò")
def recipes_ai(m):
    USER_FLOW[m.from_user.id] = {"step": "ask_recipe"}
    bot.send_message(
        m.chat.id,
        "–ß—Ç–æ —Ö–æ—á–µ—à—å? –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å: ¬´–±–ª–∏–Ω—á–∏–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫¬ª, ¬´—Ä–µ—Ü–µ–ø—Ç ~600 –∫–∫–∞–ª¬ª, ¬´–ø–∞—Å—Ç–∞ –±–µ–∑ –º–æ–ª–æ—á–∫–∏¬ª –∏ —Ç.–ø.",
        reply_markup=back_kb()
    )

@bot.message_handler(func=lambda m: USER_FLOW.get(m.from_user.id, {}).get("step") == "ask_recipe")
def recipes_ai_text(m):
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return go_back(m)
    q = m.text.strip()
    try:
        ans = ai_generate_recipe(q)
    except Exception as e:
        ans = None
    if not ans:
        ans = "üß† –ü—Ä–∏–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞: –û–º–ª–µ—Ç –∏–∑ 2 —è–∏—Ü —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å—ã—Ä–æ–º, —Ç–æ—Å—Ç –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞. ~450 –∫–∫–∞–ª."

    bot.reply_to(m, ans, reply_markup=main_kb())
    USER_FLOW.pop(m.from_user.id, None)
    def ai_client():
    if not OPENAI_API_KEY:
        return None
    try:
        from openai import OpenAI
        return OpenAI(api_key=OPENAI_API_KEY)
    except Exception:
        return None

def ai_estimate_kbju_from_image(image_bytes: bytes, hint: str = "") -> str | None:
    client = ai_client()
    if not client:
        return None
    # –≥–æ–Ω–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ data URL (–∫–æ—Ä–æ—á–µ –∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤)
    import base64
    b64 = base64.b64encode(image_bytes).decode("utf-8")
    prompt = (
        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë/–ñ/–£ –±–ª—é–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ. "
        "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´~–• –∫–∫–∞–ª, –ë/–ñ/–£ A/B/C¬ª. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º ‚Äî —É—á—Ç–∏ –µ—ë."
    )
    if hint:
        prompt += f"\n–ü–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hint}"

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # –±—ã—Å—Ç—Ä–∞—è vision-–º–æ–¥–µ–ª—å
            messages=[
                {"role":"system","content":"–¢—ã –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –æ—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥."},
                {"role":"user","content":[
                    {"type":"text","text": prompt},
                    {"type":"image_url","image_url":{"url": f"data:image/jpeg;base64,{b64}"}}
                ]}
            ],
            temperature=0.3,
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return None

def ai_estimate_kbju_from_text(items_text:str) -> str | None:
    client = ai_client()
    if not client:
        return None
    prompt = (
        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ—Å—á–∏—Ç–∞–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë/–ñ/–£ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏. "
        "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ (–∫–∫–∞–ª, –ë/–ñ/–£) –∏ —Ä–∞–∑–ª–æ–∂–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º.\n\n"
        f"–°–ø–∏—Å–æ–∫:\n{items_text}"
    )
    try:
        resp = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role":"system","content":"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ."},
                {"role":"user","content":prompt}
            ],
            temperature=0.2
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return None

def ai_generate_week_menu(profile:dict, name:str) -> str | None:
    client = ai_client()
    if not client:
        return None
    goal_map = {"–ü–æ—Ö—É–¥–µ–Ω–∏–µ":"weight loss","–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ":"maintenance","–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":"muscle gain"}
    act_map = {"–ù–∏–∑–∫–∞—è":"low","–°—Ä–µ–¥–Ω—è—è":"moderate","–í—ã—Å–æ–∫–∞—è":"high"}

    prompt = (
        "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é –Ω–∞ 7 –¥–Ω–µ–π –ø–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞. "
        "–§–æ—Ä–º–∞—Ç: –î–µ–Ω—å N ‚Üí –ó–∞–≤—Ç—Ä–∞–∫ / –û–±–µ–¥ / –£–∂–∏–Ω (+–ø–µ—Ä–µ–∫—É—Å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏, "
        "–ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –∏ –ë/–ñ/–£. –ö—Ä–∞—Ç–∫–æ, –Ω–æ —á—ë—Ç–∫–æ. "
        "–ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–æ–≤, —É—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª—å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\n"
        f"–ò–º—è: {name}\n"
        f"–ü–æ–ª: {profile.get('gender')}\n"
        f"–¶–µ–ª—å: {profile.get('goal')}\n"
        f"–†–æ—Å—Ç: {profile.get('height_cm')} —Å–º\n"
        f"–í–µ—Å: {profile.get('weight_kg')} –∫–≥\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {profile.get('age')}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile.get('activity')}\n"
    )
    try:
        resp = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role":"system","content":"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞—Ü–∏–æ–Ω —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–π –∏ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç."},
                {"role":"user","content":prompt}
            ],
            temperature=0.4
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return None

def ai_generate_recipe(query:str) -> str | None:
    client = ai_client()
    if not client:
        return None
    prompt = (
        "–î–∞–π 1‚Äì2 —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —à–∞–≥–∏ –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ü–∏—é. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–∞–ª–æ—Ä–∏–∏ ‚Äî –ø–æ–¥–≥–æ–Ω–∏ –ø–æ–¥ —ç—Ç–æ."
        f"\n–ó–∞–ø—Ä–æ—Å: {query}"
    )
    try:
        resp = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role":"system","content":"–¢—ã –∫—É–ª–∏–Ω–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –≤ –æ–¥–Ω–æ–º."},
                {"role":"user","content":prompt}
            ],
            temperature=0.5
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return None
        
